<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>树状数组-入门</title>
    <url>/2020/ds-fenwick-tree-basic/</url>
    <content><![CDATA[<h2 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h2><p>树状数组可以用于高效计算数列的前缀和，区间和等等。</p>
<p>它可以支持在$O(logn)$的时间内得到任意前缀和，以及在$O(logn)$时间内支持对区间单点值的修改。空间复杂度为$O(n)$。</p>
<h3 id="数组存储方式"><a href="#数组存储方式" class="headerlink" title="数组存储方式"></a>数组存储方式</h3><p><img src="https://s3.ax1x.com/2020/12/22/rD8IfS.png" alt="rD8IfS.png"></p>
<p>如图所示。</p>
<p>$A[i]$代表原数组的元素，$C[i]$代表树状数组中的元素。</p>
<pre><code class="lang-c++">C[1]=A[1];
C[2]=A[1]+A[2];
C[3]=A[3];
C[4]=A[1]+A[2]+A[3]+A[4];
C[5]=A[5];
C[6]=A[5]+A[6];
C[7]=A[7];
C[8]=A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8];
</code></pre>
<p>而其索引的二进制表示如下：</p>
<pre><code class="lang-c++">C[1] = C[0001] = A[1];
C[2] = C[0010] = A[1]+A[2];
C[3] = C[0011] = A[3];
C[4] = C[0100] = A[1]+A[2]+A[3]+A[4];
C[5] = C[0101] = A[5];
C[6] = C[0110] = A[5]+A[6];
C[7] = C[0111] = A[7];
C[8] = C[1000] = A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8];
</code></pre>
<p>我们可以找出规律，</p>
<script type="math/tex; mode=display">
C[i] =\sum_{k=把i二进制表示的最低位1置为0后，将新的值+1}^i A[k]</script><p>也就是说，问题在于如何找出$i$的最低位$1$所代表的数值。</p>
<h3 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h3><p>这里我们可以引入<code>lowbit</code>函数。</p>
<pre><code class="lang-c++">int lowbit (int x)
&#123;
    return x &amp; (-x);
&#125;
</code></pre>
<p>我们已经知道，对于整数表示，有</p>
<ul>
<li><p>正数的补码是其本身；</p>
</li>
<li><p>负数的补码是在反码的基础上$+1$；</p>
</li>
</ul>
<p>因此<code>x &amp; (-x)</code>就可以满足我们对于查找最低位$1$的需求。</p>
<p>举个例子：</p>
<ul>
<li>二进制数 $11010$ (1) </li>
<li><p>其反码为 $00101$ (2)</p>
</li>
<li><p>加 $1$ 后为 $00110$ (3)</p>
</li>
<li>将(1)(3)两者相与便得到最低位的 $1$ 所表示的数值</li>
</ul>
<h2 id="树状数组的建立"><a href="#树状数组的建立" class="headerlink" title="树状数组的建立"></a>树状数组的建立</h2><p>上面准备工作都做好了，码就行了:(</p>
<pre><code class="lang-c++">#include &lt;iostream&gt;
#define MAXN 12
using namespace std;

int ft[MAXN+1] = &#123;0&#125;;
int a[MAXN + 1] = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;

int lowbit(int x)&#123;
    return x &amp; (-x);
&#125;

void generateTree()&#123;
    for (int i = 1; i &lt;= MAXN; i++)&#123;
        for (int k = i - lowbit(i) + 1; k &lt;= i; k++)
            ft[i] += a[k];
    &#125;
&#125;

int main()&#123;
    generateTree();
    return 0;
&#125;
</code></pre>
<h2 id="单点更新"><a href="#单点更新" class="headerlink" title="单点更新"></a>单点更新</h2><p>再把这张图拿过来：</p>
<p><img src="https://s3.ax1x.com/2020/12/22/rD8IfS.png" alt="rD8IfS.png"></p>
<p>如果我们要更改$A[3]$的值，那么我们知道，$C[3], C[4], C[8]$ 的值都会受到影响。</p>
<ul>
<li>$3(011)$ =&gt; <code>C[3] += temp;</code></li>
<li>$lowbit(3) = 001$, $3 + lowbit(3)= 100 = 4(100)$ =&gt; <code>C[4] += temp;</code></li>
<li>$lowbit(4) = 100$, $4+lowbit(4)=1000=8(1000)$ =&gt; <code>C[8] += temp;</code></li>
<li>……</li>
</ul>
<p>因此，我们只需要对所要更新的数据不断使其自增lowbit后，</p>
<p>使树状数组的对应索引增加 temp 值即可。</p>
<pre><code class="lang-c++">void update(int index, int val)&#123;
    for (int i = index; i &lt;= MAXN; i = i + lowbit(i))&#123;
        ft[i] += val;
    &#125;
&#125;
</code></pre>
<h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><p>假设现在我们要查询1~7的前缀和。</p>
<pre><code class="lang-c++">C[7] = C[0111] = A[7];
C[6] = C[0110] = A[5] + A[6];
C[4] = C[0100] = A[1] + A[2] + A[3] + A[4];
</code></pre>
<p>归纳可知，我们只需每次将索引减少i的lowbit，然后将对应的树状数组的值求和即可。</p>
<pre><code class="lang-c++">int getSum(int index)&#123;
    int result = 0;
    for (int k = index; k &gt; 0; k-=lowbit(k))&#123;
        result += ft[k];
    &#125;
    return result;
&#125;
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84">https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84</a>‘</li>
<li><a href="https://bestsort.cn/2019/04/26/195/">https://bestsort.cn/2019/04/26/195/</a></li>
</ul>
]]></content>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划的背包问题</title>
    <url>/2020/dp-backpack/</url>
    <content><![CDATA[<p>所以为什么要找一个背包图片当头图啊喂</p>
<h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0/1 背包问题"></a>0/1 背包问题</h2><p>有$N$件物品和一个容量为$V$的背包。<strong>每种物品仅有一件，可以选择放或不放。</strong>第$i$件物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>设$f[i][v]$表示前$i$件物品(部分或全部)<em>恰</em>放入一个容量为$v$的背包可以获得的最大价值。则其状态转移方程便是：</p>
<script type="math/tex; mode=display">
f[i][v]=\max(f[i-1][v],f[i-1][v-w[i]]+c[i])</script><h3 id="0-1背包的空间优化"><a href="#0-1背包的空间优化" class="headerlink" title="0/1背包的空间优化"></a>0/1背包的空间优化</h3><p>我们可以将二维数组存储优化为一维数组存储。</p>
<p>在每次主循环中，如果我们以$v=V…0$的逆序推$f[v]$，这样就能保证推$f[v]$时$f[v-w[i]]$保存的是状态$f[i-1][v-w[i]]$的值。</p>
<p>伪代码如下：</p>
<pre><code class="lang-c++">for i = 1...N 
    for v = V...0 
        f[v] = max(f[v], f[v-w[i]]+c[i]);
</code></pre>
<p>　　其中$f[v]=max(f[v],f[v-w[i]]+c[i])$便与原转移方程等价。</p>
<h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>有$N$种物品和一个容量为$V$的背包，<strong>每种物品都有无限件可用</strong>。第$i$种物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>令$f[i][v]$表示前$i$种物品<em>恰</em>放入一个容量为$v$的背包的最大价值，于是可以按照每种物品不同的策略写出状态转移方程：</p>
<script type="math/tex; mode=display">
for \ k\ in \ range[0, floor(\frac v {w[i]})]:\\
 f[i][v]=max(f[i-1][v-k*w[i]]+k*c[i])</script><h3 id="完全背包问题的空间优化"><a href="#完全背包问题的空间优化" class="headerlink" title="完全背包问题的空间优化"></a>完全背包问题的空间优化</h3><p>完全背包的特点恰是每种物品可选无限件，所以我们可以考虑“加选一件第$i$种物品”策略。因此我们可以使用<strong>可能已选入第i种物品</strong>的子结果$f[i][v-w[i]]$，于是我们必须采用$v=0…V$的顺序循环。</p>
<p>伪代码如下：</p>
<pre><code class="lang-c++">for i = 1...N 
    for v = 0...V
        f[v] = max(f[v], f[v-w[i]]+c[i]);
</code></pre>
<h3 id="另一种解法：转化为0-1背包问题"><a href="#另一种解法：转化为0-1背包问题" class="headerlink" title="另一种解法：转化为0/1背包问题"></a>另一种解法：转化为0/1背包问题</h3><p>考虑到第$i$种物品最多选$floor(\frac V {w[i]})$件，于是可以把第$i$种物品转化为$floor(\frac V {w[i]})$件费用及价值均不变的物品，然后求解这个0/1背包问题。</p>
<p>更高效的转化方法是：把第$i$种物品拆成费用为$2^kw[i]$、价值为$2^kc[i]$的若干件物品，其中$k$满足$2^kw[i]&lt;V$。这是二进制的思想，因为不管最优策略选几件第$i$种物品，总可以表示成若干个$2^k$件物品的和。</p>
<h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>有$N$种物品和一个容量为$V$的背包。<strong>第$i$种物品最多有$n[i]$件可用</strong>，每件费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<p>基本的方程只需将完全背包问题的方程略微一改即可，因为对于第$i$种物品有$n[i]+1$种策略：取$0$件，取$1$件……取$n[i]$件。令$f[i][v]$表示前$i$种物品恰放入一个容量为$v$的背包的最大价值，则：</p>
<script type="math/tex; mode=display">
for \ k\ in \ range[0, n[i]]:\\
f[i][v]=max(f[i-1][v-k*w[i]]+ k*c[i])</script><p>循环时注意$v-k*w[i]$ 非负即可。</p>
<h3 id="转化为0-1背包问题"><a href="#转化为0-1背包问题" class="headerlink" title="转化为0/1背包问题"></a>转化为0/1背包问题</h3><p>将第$i$种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为</p>
<script type="math/tex; mode=display">
1,2,4,...,2^{k-1},n[i]-2^k+1</script><p>且k是满足$n[i]-2^k+1&gt;0$的最大整数。</p>
<p>例如，如果$n[i]$为$13$，就将这种物品分成系数分别为$1,2,4,6$的四件物品。 </p>
<h2 id="二维背包问题"><a href="#二维背包问题" class="headerlink" title="二维背包问题"></a>二维背包问题</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。</p>
<p>设这两种代价分别为代价1和代价2，第$i$件物品所需的两种代价分别为$a[i]$和$b[i]$。两种代价可付出的最大值（两种背包容量）分别为$V$和$U$。物品的价值为$c[i]$。</p>
<p>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前$i$件物品付出两种代价分别恰为$v$和$u$时可获得的最大价值。状态转移方程就是：</p>
<script type="math/tex; mode=display">
f[i][v][u]=max(f[i-1][v][u], f[i-1][v-a[i]][u-b[i]]+c[i])</script><p>如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量$v$和$u$采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品。</p>
<h3 id="物品总个数的限制"><a href="#物品总个数的限制" class="headerlink" title="物品总个数的限制"></a>物品总个数的限制</h3><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取$M$件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为$1$，可以付出的最大件数费用为$M$。</p>
<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>还有分组背包还有依赖背包但懒得写，源代码也有空再说8</p>
<p>诶mathjax怎么又炸了</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P1833">https://www.luogu.com.cn/problem/P1833</a></li>
</ul>
<p>附AC代码：</p>
<pre><code class="lang-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;

int v, n=0;
    //  i j   k
int f[1001] = &#123;0&#125;;

int max(int a, int b)&#123;
    return a &gt; b ? a : b;
&#125;

void processTime()&#123;
    int a, b, c, d;
    scanf(&quot;%d:%d %d:%d&quot;, &amp;a, &amp;b, &amp;c, &amp;d);
    v = d - b + (c - a) * 60;
&#125;

void tryItem(int cost, int value, bool inf)&#123;
    if(inf)&#123;
        for (int j = cost; j &lt;= v; j++)&#123;
            f[j] = max(f[j], f[j - cost]+value);
        &#125;
    &#125;else&#123;
        for (int j = v; j &gt;= cost; j--)&#123;
            f[j] = max(f[j], f[j - cost]+value);
        &#125;
    &#125;
&#125;

void decompose(int cost, int value, int num)&#123;
    int base = 1;
    while(num&gt;=base)&#123;
        tryItem(cost * base, value * base, false);
        num -= base;
        base &lt;&lt;= 1;
    &#125;
    if(num&gt;0)&#123;
        tryItem(cost * num, value * num, false);
    &#125;
&#125;

int main()&#123;
    processTime();
    int n;
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++)&#123;
        int a, b, c;
        scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);
        if(c==0)&#123;
            tryItem(a, b, true);
        &#125;else if(c==1)&#123;
            tryItem(a, b, false);
        &#125;else&#123;
            decompose(a, b, c);
        &#125;
    &#125;
    int result = 0;
    for (int i = 1; i &lt;= v; i++)&#123;
        result = max(result, f[i]);
    &#125;
    cout &lt;&lt; result;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>dp</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title>密码保护文章测试</title>
    <url>/2021/encrypt-test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="【■■■ - 密码错误 - ■■■】" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8712cc481fc34ae6d16ea47f63532ef2acc2c124b33fb3f40c54973de3857f5f">018a63061e17dd91a60e05280129f742932d41a23e2bd96bdb1d48a7faba3ed7b029007f6e466b7ae950fd3977006312fab6bc5ff0c39b2e1bf6c5f37584a15703aba8c89474cb7ce75d3218d2a7d448</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please complete the sentence: c7w,_______.<br/> You should type in four characters in lowercase.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>数据的离散化</title>
    <url>/2020/data-discreatization/</url>
    <content><![CDATA[<h2 id="数据的离散化处理"><a href="#数据的离散化处理" class="headerlink" title="数据的离散化处理"></a>数据的离散化处理</h2><p>什么是<strong>离散化</strong>？</p>
<p>离散化，把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。</p>
<p>通俗的说，离散化是在不改变数据相对大小的条件下，对数据进行相应的缩小。例如：</p>
<ul>
<li><p>原数据：1,999,100000,15；处理后：1,3,4,2；</p>
</li>
<li><p>原数据：{100,200}，{20,50000}，{1,400}；处理后：{3,4}，{2,6}，{1,5}；</p>
</li>
</ul>
<p>例子：洛谷P1908，树状数组求逆序对时的应用</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1908">https://www.luogu.com.cn/problem/P1908</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Gone with the Wind 读后随便写写（不推荐点进来看，因为我自己也看不懂）</title>
    <url>/2021/gone-with-the-wind-report/</url>
    <content><![CDATA[<blockquote>
<p>I Won’t think it now. I can’t stand it. I’ll think of it tomorrow.<br>After all, tomorrow is another day.</p>
</blockquote>
<h2 id="写这么一大堆东西谁愿意看啊，我自己都不愿意看啊kora！"><a href="#写这么一大堆东西谁愿意看啊，我自己都不愿意看啊kora！" class="headerlink" title="写这么一大堆东西谁愿意看啊，我自己都不愿意看啊kora！"></a>写这么一大堆东西谁愿意看啊，我自己都不愿意看啊kora！</h2><p>Set in the background of <strong>American Civil War</strong> and the <strong>Reconstruction Era</strong>, the novel <strong>Gone with the Wind</strong>, shows the look of the society in Atlanta, Georgia during the time. It depicts the plantation-daughter, <strong>Scarlett O’Hara</strong>‘s twelve years of struggling life to survive and get out of her poverty.</p>
<p>The title “Gone with the Wind”, which was taken from a poem, appears in the monologue when Scarlett was on her way escaping from Atlanta to Tara, desperate to avoid the Yankees and flames of war.</p>
<blockquote>
<p>Was Tara still standing? Or was Tara also gone with the wind which had swept through Georgia?</p>
</blockquote>
<p>It is no doubt that, it is the strong character Scarlett has that attributes to her uncommon life. Unless the war broke out, she might have remained the spoiled daughter of Gerald, with her thoughts completely on her beautiful appearance, her countless beaus and, Ashley Wilkes. However, to survive while the war was going on, she had to completely give up her elaborate manners. Sorrow, hunger, poverty had rebuilt her.</p>
<blockquote>
<p>Somewhere, on the long road that wound through those four years, the girl with her sachet and dancing slippers had slipped away and there was left a woman with sharp green eyes, who counted pennies and turned her hands to many menial tasks, a woman to whom nothing was left from the wreckage except the indestructible red earth on which she stood. </p>
</blockquote>
<p>As the story shows itself to us, Scarlett is trying her best to seek her true self. Through the changes of her relationships with other three main characters we can see that:</p>
<p>First, Ashley Wilkes. As a child, she couldn’t move her eyes out of him. She had tried her best to win Ashley’s affections, but all her efforts was paid in vain. It is his marriage to Melanie that made her furious and decided to marry poor Charles as a revenge. And, as time went by, her love for Ashley has gradually become her spirit support. After their conversation in Tara, she knew that Ashley and she come from different worlds, and thus have different opinions toward life. After the war, what she wanted to do was reviving the plantation, feeding the whole family and getting out of poverty. However, Ashley was always trying to get back at his good old days, dreaming for the past that has already “gone with the wind”. Ashley did love her, but it was only for her mind, her soul, and her nobility of character. Finally, after the death of Melly, she realized that all love she had for Ashley was just based on her imagination and no more than that.</p>
<blockquote>
<p>“Life’s under no obligation to give us what we expect.<br>We take what we get and are thankful it’s no worse than it is.”</p>
<p>From Ashley</p>
</blockquote>
<p>Then, Melanie. At first all the feelings Scarlett held for this lady is despisement and she was jealous of her marrying Ashley. But when Atlanta was under siege, Scarlett had to care for her and, as she thought, that was just because her promise to Ashley. But when they were in Tara, comradeship developed between them. Not only from fighting together against the Yankee-thief or putting out the fire together, but they treasured each other’s companion, at least Melly treasured and loved Scarlett. During the Reconstruction Era, Melly just tried her best to defend Scarlett’s reputation and always stood by her side. And, at last, Scarlett finally realized Melanie was one of her spirit support, but, it was too late.</p>
<p>At last, it is Rhett Butlet. Scoundrel as he is, he has always loved Scarlett, and always ready to lend a hand when she needed help. He tried his best to get Scarlett out of Atlanta during the siege, and he immediately went for her after he got out of the jail. And, he treasured little Bonnie as if she was the childlike little Scarlett. But after Bonnie’s death, he got upset and disappointed. On the other hand, Scarlett gradually saw through the mist in her heart and discovered her true love for Rhett in the end. But, but, it was too late, either.</p>
<p>At the end of the novel, Scarlett decided to get back to Tara, her plantation, to start her new life. Whether it’s because her Irish-blood or her life experience, she was fond of the red clay land, and she was fond of the farm. Just as she thinks, “she knows she could get Rhett back. There isn’t a man who she cannot get, once she has set her mind upon him.” And after all, tomorrow is another day.</p>
<hr>
<p>唔呣，可以做一篇短文改错了，好耶</p>
]]></content>
  </entry>
  <entry>
    <title>2020-01 日记</title>
    <url>/2021/diary-2021-01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="【■■■ - 密码错误 - ■■■】" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4d0999c4d313c68538020a41f3ebaf44aa6f6fd2b826ede33847802857df1a1d">2827033f81fcfb979d6a35f655f74dad666f139907e7dd6158a7a05612428cef2dc4832a96d82f8600ac7870d88d59f3b217351a137527de34b6171e25e654b99d1dbbbeaf73d719d4c5df94654c37516a690eef29c6363c38771788ca6721a9aa2f73ef42ff831a76ff43e7c95be066d87ef8b427c0cd8e72701800390a6c30a2010e2b0382fa3988ff24b8e3cbe5ab44083143e97f6bde882c62ba7e8fb332143cf952a615a66eec9204e8f1c8fc4fb7d48ac10aeb6c46939976f4364030f6f655f08de9a64be3f5cd1599631617a12c467bcdbd0783915b8a47252bea543a9d8207d2d33321dc7ee4b346271f5f4d2c41bcfedb905820fa5a7275c8f2d20974ba8e30253b4c77520439b79c54e642df9d9358eb55984eda56c9b084084df25eec1105d18ca3d64b47dade2937f670b1ac8f7faa4f44d84f77e003eb4df6fc0e39b14f96071423a3ef17452e21711c9ed950d83cfb9f786d5a0dd6c9094f205f8e6387cc83fff9ff3a2aaceb4152fdeffc6f5da13a628f3a3332a66050c8435cd17c94df3818790f38baf40e87b3b9ecdd188727ce8c5dc9c0c605ab1213bc9684c0c6e8ac76db3f0469c05c89402f77385365bb1de0d5f576918f5224b0bd76f32319958bca75bbbb2b2a207aa7080f7bda948cef595fb92632786c26731219f7f68a863e580edadba79cab5a1f2724e94418e9005b146f312e2093c4fa6670ee5115554bf71aaa27714801535f56ae59b6975ffcfafb52455b2b362eb96097c9ed692db93464e6361e7cc27612c4d30a44b90ce8bd8ccacb9cb0f77265411eaf0b3afc0f96db3bceb89b12b33fdff95dee12aa084027e7f122e8eb11908626e7a69b74f279da118ef35fc474dd15529ef2067d7b8712f51e17d5f83da35d5e1578736644480c96c7b958f1583637303149f26741627f24741e590ba71f0994e1aee525ed2919b0a5d7fe034b57f7f589c78a01cdf74719dad94d07b0cc7d3d1a5509b21d5e78b5cb1d379c63708054b10eac36a1eedbb047f40e364789eac0debc576551d230c0b10744f72a62ac019ff43853dd0764bc247071b4109ab3a22786e2a4cec7ab8d087ad216affcf951e833069ef4c1c96ff326908f925323ba91ffc1b1fb146935a6727f593d06acb8fac0d9aa056f39c409b0b44e37d8b7f3e4801c85efd188bb2c4878ea11eee65aa8ce1fb5b82fcded65f402a493e20ca4afe6f06965402bc90c9ebbacc6fbe7f4d789bee8235d2cad7ae1bc914ba763a69e9f77819e22c0c7ad187ec776247a482411c1c34f3504bcd054a5ede5442749f4d71ab94c64067e6a8d743d22b65854daa7e3ba1e020301abf76f748540870f8b93893886d6816917416832bdc0bfeebb6170d9e224ab69bde386644ed4b5f167dbea5b30adc933872eb72957fac4cbc2f01e017e73ca31328615f67d89792c8a639b4a67199bcc028af38c838e2f4b881088e03cd7fcb4be43808d6a06308f14d35a1eec4283a33089661a5a2e1bdf43e0a426bd3aa545b90e4443a103300a4eb6897bbf30fe463486d769dbe677ca1de70c2a408e8d683cf19216823bcc6e001aeef9ed8859dad3a7be81416adcbaa9bfdad244c4de84ec5fd9ea13d78701b01ce186c9ef988ae025287d574b671f198ff7755eeae4fe8cea2435998a7267f35b85c4983b9075b222dd584993f632030a478ac17725861d3be2dc541cd3e3b4914f69647d725fb76a5e33348dd13e7f06b0c11a1840f5e0625dbae27257100c0f9d7f3ec8b56f64c37e53c01919aeb9b2868c0950e330c00d80530e4b6c2b0148d8d53bcb6a5e2edc322db4d010a8f6a016e8e1eac9655b012e945756091c6acd1d8c028e930aabe675d3e961d2323922dedbad060066677ee2fc95a8126624adce8a6ad54279e32b3fb09a435cca25caa817c85f0ad10bea7f5abc6013618679934ef0c23100cee261cefc52867226b170bd28626a6d3df2d368f43127fcf029e077903ceec4af2f92f9ad833e63ad8d6a5e5b1f5809b73c769ddfaf9daec26a648c2f7a886c619120846937ea333e76c0dd6cbeb5606f321cc94002c3da7c4373bd88992cc611a27e42ec4a3e1565ac7c87825e06d7f453f202be33bbdd1378eb33faefd1b2f7f7aa356f2f1133f8a6597bb1f8a20ee1b57fe98a4ed06f09011c67f80c03f552b156c305e5564897ceb93a6f9a428c93010559e6413e8b5a877c294364b3fe781b2bc61ebfb6463124d82a8d5da511397da13f3a2fe45c9efab553ba0bdb0f1e51c4a98897af19d97b9a672efbe088a3cf6698057c2abc6942b22a956b9d138233e231795661f9f1662c8ea50a50a7b491d6ed98c766c6167ced6f8f9e3a0b00cea6331a07f898d5711355196cc0164fbac1a33acd752ada94e05c70581cd45dd0e708bad79353fc697b5310eb464d0cf3254c3a651cd73ad1090ee1f98c4dcb6f81ad6afa0d53cb84f4151c3ec7fa725cabb0e26a5c4013f9cb41dec3eb863cce3325894274e2a6c4779486d593981387443f95a5f6c1229aa83cce6353383ea6defbfd3a4039ffb221f1369d0fe7f563efefda9cb3f97e7006f597510ef91b8648a6994161ee413c912f44c19126a7178edfce02f680a69459e1641f3047145c6862d02ea6c7c3f710f7182e3213c36c50a9d4b1864a9ffa499d7f563f49dc5a4872e9547cbef6d07b75465c2f51367c90393961c24e710c314941b91cffabdb051cb7ab18b9695ce13385aec6f2eab20167affab1aad8e2ce55008815da612fb9e644b95b8c6fdc819d51c035d7ba652ed8589af63b71d91f25c3042e65902ee1c079d407b3441ee63ed3a91f163628349d0cc75b4530f834e7da8c3d1e87b1ce3077fa68326b44b83f655c06c93be47b43109650d0df242e687c27251690451e46a187b36595ce8357d56f42d8ec05c4d5828b347cd30c7934c90c8abf7f97168969851fd4eb25b63e1bac41e216ad044d223c3ce8ef088c4f46a3a6d7335b623c8d19dbfac270706a70543bd1790ca3752ebba5bc6c01496e3dfa17d02df3055ce8dcd53f1fe77b0b7b8a26a46205810c46df05271ea685fc183e538bdfefd4e20a26abd998aa64d33360b003c69d429249958c0db13667ea62b8a9d163b21cde16cd15fe13d6cf60991a66f6fe46076c77b96ecbb5d53cc19b5da1af2b70049be6c32c1d7778c2d717a2baa4c41a916fb78a3366099e7ba83ff4af65fb0d2a42557dbdf686ab0dad451fb6afc8d658aa2edb11f7a7e07f67dad40cd4a7a2a71ea93d904917a346e55f8990b05813317fc988c204781a62f9edb17eef36360cfb678ea590f69de1795ebc190fffecdf3d7aa876cf2b0f2a875b5302764753e332326ae55dd98689106eab184c5136ece7ed231db339f6fbd91294e6695b3779f824ad61be6cc8a3aad1ff688ccbc5b42404bc328cab2442c7be7e7b4a2ccd9fbb5b018ed5d02f38e6f26738f48709855234839debee7cef0aa947bbe83f7e7ef86ccf4a70620f7805acc030c59af67034c620718dae3c3a8c7e5780f8107214cbaab9b7e32ac3b0abfc722dca569963d3c968a633e5852305472e19d8df9bae75e1280ea51bab47cdfe66cd18f7ca1c044b411c88f0f2ce0f7d952ed3af6c6a68402fb29550c243ed5d60e77ffa28080aae2e85b371307be7e6017ee9432772321b6188b5183ae9831da9905da564f3d1de00695e6c6e324489b8cb14f750e330149904cdc3a86f5cd9830967cbc2fd4d1f191ec95a37f875263fe6e0286e0cb2301a28dfb76e2106b99978d68b260bb5ed7eb982a707cc4073770e342d6e4fa29d6262081689b68d0c4c290825ff22048b55b2b244835c48e815eb32726fc46cd0efeaa984316a4d484666bfc708707c7645c15933a3fe0936cf71140b873c941d41bd8e3c386d8230ba6943b4edae11d2657fca3b777beb5b5e8f6770ae9fb303e5c968bc496527bbddfe916a0fcb8e575290494f720547aea0019ed331c2a1b6151ecdf01d45486f80bc12234527eb40a20ab6788f858ba7d6fd6eff5dbd4c52381de68b9fe2e7d98f4938d6d29fdcebf03714f0320502d295f51c3be60ee4c522aeb7563c1cf6d8f651014a8ca3b64c66ae3f9183c90e8404e7d479ece9323ab1c0e7d7f51d0f260985f7804f4742c7ad01d0d0a279df667d8ef60f3ed80ed112028cafb4bff259c74a6b18306b91ddc130fc4ff46af1ae5aeeb9316f310a5936f67e2a1191cba754edc5163ddebb3c0536a340d6394673f90119dc4bfc669c058ca854775e6ea7a1bb0cd63fac7eef58fdaddefb938110bebca17c2e3dcf43329a6c56009e79ebdb0348befe8b5d6f955fb3f66b0926c65b977a37cba09f020cfb63b3c66a9372e700c7afe4ffb122c9830c3f205ef16655a305d80486022c2670d0904b2c71c37dea5f6d32dfa899c2998c7493e942184c509962cbacce5b5f61516542e93ef3e60e01c8b63530d1c2669169555dfd96938c85fe1629e47caaf826a9836aa602c68f30e8192df4762e2def6011390251ee0b9bf06c41650dcd1b3f621d9c5fcdc60f1885dd98d5ba6b25d76a95575ca766914c4a1edf954f7557d77cf7f4817632f0c02be9ad7da87b58c6d4221a0622ecb5ef821f0d70efe0ee418744af2989102a496d65a810730e198b318379f01783732fc7dba989e4a4af436b6c8da56aa7d1f943a36f136ae61b5fb1b39768c0dcedfc381b65a85d7967cb15d51088e03d98e7ad53138043d86bad762945f5d045d7c412e7ff47c565526afeef11bfd4a23512045027f0cf8ca6f78f9d2cf4d2b3bf7070b4adef4813a7b8df90d2c2c301e61fa1c550843f2c31a89991423bceb639a142d3fa113bf3a6e7fe1c27994ad352256ba6b5a0e99c49175515978c8f3590b6fa9267a2ca9efaff9876f3d9f63e72554c792dee2a6ad1dfd7827d698aa8a4e28d02c59de1188e2ce539d7413f2fed935cb9c61986e7b624635252037ff7e4a09562281753274d5b63175a11dcf61b6fd7bc98e9a7a15396b2092e190f09d348ed3655b4fb86efc24afd9f1d330d97b8ac340afc502c6f16f8c27b673be78e05758d9ba1c774814766e2056208c970f3cf8b33ef169a2947e59ec75462ecdf5580a6f2aa9448bcb5c227445a1c37c403bae48a06c6976d835a8579d1d26f8d67c3d93c9edfdc93a7501084b62f3e88e902f6b1ab9b175037b18432ac49a033905668b112a9cde11bd5ac573a0028785ec35ace60bc00ea675c1fb5127bbbc26b1d7e41cabd72fce6f3bbc96afd1c0bd5431ade4ebc0c27b9f5142a5c766ba414048a7dced4c58f20f7dc36657179ce97c86bace3be7e1b9604553dc6fe5ad751a77142d84f910ec6451d7481244acd83dfbf978a4b8d9e6b4abd46aff60d5782700e01bff25f027cc42d349b4799d6e8a46e1307e1c2862472ef824bba9fca27eb77e673c07a4963cd80a3ee7f407fad5f96771e7a9f7634cc3675ea1710ed27a842228e8a0842043e0d7f0dfb33870434907fa41ba3fdd6c88f5268b8eb7b0b18bc459703a214c74a6aa02ab52fd5daea5f51fdadaf40db200915d77d98f34db3766b5a728679be53e12d576b8bca8996b94f56477ed3b94fce2e6c9c9427a50cd32a421fadae178d52c2314c8a67d2d02eb3ad12b720dcb001f2674260826d576647c0e82e0c9930b1b6718fde71e1a162e026db6d6600f39e3a9d75172aa870f6b8140a9dba1a641d9622cd6002f5ea5ee9360299bfdde459432264031bbdac1a3d9ec91ebb282f0f93a441e8a30999aaee0880b72815463f2c5730ab6aa88e06593e6cc79ae781ea8f369b0d9d5a68ee4208ed53f98d90d5f91924ffe8d0e4013268346930ed4084655d6f2a5ad5c184f83c8886bd6d854177ad7d25d4b8db9a5011dc2bb293c6b7718eea144525118f81f18acdfe4f55d96f79ea934dac1bf18e85f1c910a5b3b9ade9c62a69992650fc4dd1f2f4b87efe6fd36aeca2569e9e99edb08031a6ade0bc9b12898fcd546d87dcc939beb35e97b2073c1c3af42bc04c3a2215cc50c2053eb4c5fe686ea93c697e8887daf41b374775cf464b0c9845dc55351eadfa9c26d86fe61f3610f4e289975c7ac913a0ff4c38b5f8e7c9d9740ad0b4287c496cdca55c03ddce35ea6780e5d266d6eab5031af9582ee5664b0df364a94bf2d234e93f82b607f099c526426b79ad80761796f53d0a85815159d99ad4538e2c0a8d93c3f1f9d965fc03dc34477f3deb88428a905637486baf964a5d1f2071fb5745547c7be34c09305db9408253a01d88f624a3b63264800566a36145c62c5134257cc5861d85b46df22c60f10f9cd45262548d2041a45de9a326f3f0bd42dae3aae29f81f7263dc66bd4d508c54f4e3cc1ffeff71d8d3e1846d7070d10665e53f652fdad473cf17faf3bde7f21c3b88f166e8c13c30b3fb6ae2770851d1f49d7ea356356ebb0ce881d0bc59bd04f5e80aa89219779cc264784d982e4ba48bdfa6aed302b53b321729adb57177d7f548db12d968e22adcd09142d24cd33d7d324f15cb3f31d679d0384d63561328190d1b4757ab8ff132a831fa449edd7170e177434e5419aeca53ec2a68acae3190aafda5ac015f67243f42f6ccf230aebcb89b38a4e989538cb91e459f4cee6b1e3ee9e13d5da941e17a7a6fa67c2f10f7378b0fe38540192197474b5c6faf9346752bfbef8daa86d2caaaeb67b3f739992711da3c06bcbf0731fd5321810e05d63cbb607ad38ebf4945fa4c8304fedb269de6794652001500875b4fcb2b04e7673c2240d7383c4974292556bf7ca60ed3dfd96358b4ac64692e6a95a301e2513ec5a5c4b239eb5a7503c8b17c6c4fb1f7fe0edf4c647389f07b33be2a59e28f86271d3e0adfef34a5520bff98df730e66b28de79f381e7105f7278b414b4f49ce01f83b74e2ce66bd45e90378d63bb39c5271c3c56c9cf820e0e9bda63323922f25f95c43df8f448b1832496a3c7b0fe87118c8cc8d8d5647d6a9aef3770f5a09fae661f288705ca5c730e3167603230cc9eaef24a7e1f4473407fca0f77c7dce10f7c47b701660b80dc9688ca669e4762a7bdb55cc29b625c0dac701d566e0d60a1dfef34a0f679a1e6297573410041b3d1f5336494f996ae13c82cabe3cecdf49e54be3aa6743268da7a40f4c938547ad278240ce9cd6c6cd8bcedd1ffff3caf5f879bedcb33d53099d547d0999a8ddbe86df11e11cf58bdcf56190923c1b350346d8e13117309a04090fc4080748b74fff9eccc0f52b52d735da2e47dd120b6b68c3ad17a920878ecb9ef20d0e3e664ad4878abde0616a082585ff82156f02411f32deff2e02b22df710d6dfc2a40af4edfbfd055e67dbbbc08bd15f91eb080affccc0edf1a6bc00ba58db0dd4f8004351def32bdd99a647235b511fd5f1a2d0b719d9f1a3bbafcdd2fed84a8735090413621b50990802fcda93bb3608cb6c2714d5031f11f10d766b1ef255a654c47a77cee05ff8cccf3c7c2aaa3d190c6aec2fbff9469460240fc135e06f296e96ca024307d5983340c8faf36d96fa09f9839dca97a407e94cb4e2d4b9d21028def66d619566c895058f4b27602f09b4ed0452c52784e52a0849a7b2e6de4cf78b579cd74433f12fe172a6117a86392b95af1ee02ef2cee8b0cf0597c810eb0616d9c774290163170a240976b550129b27e5f0db5f62cd7b094d29e1269be206d1ccbd3b7fbbbe55ebcdb952f7d636cac9d775f1a5eb217f085df64bad05484008f6a2b95a244a05d8ff3ef736cdb2b590be721fbe287782635decbe35c32e24e7a289d08af305cd06daa7dee933022bdfdd103d8ad728286b46b3a0fc5a7e12d065bcd4f3f78231c87f8726698b01a6a89fa360e7ef46f2cb58fad6da5374ebc4fb676cafc325482993150437d618f1f06503153a3d741cf842dca4da72914ab5bd51ad2235835afffdd335db6d47250e823ca6ec6b1da06f45fc7d63bd05e978f93afd618f7138654d769db687bcca8bc66b46f2f03a33c09b480a1eec681da852577090c66e13291dffbac187ba97339b305f97e19e5cb45262fbbbff13f6d5d65d6158ff96a2f9be8c3fa0982db5cf66673744bf91e077e820f9e0d9949693646b2acd7518c6ac4418c111a1caee5e0872c7620d2eff86e5601219cda9b396bf8bbc82d638a811ffd3f8d0383c9267eff2643aeaa32aadb2176772b93aca3eba11f2582ab7de068016747f9cc62ba15d257a715d9011f4f2900e915ee20719e1b33774b4ba6c8ed899546292864233e0a62dbf02cb6aa74e197bf164ceefd4b7c39cf7cba1e1b43e9c84e2ba967c2cedea6e36fe3773321d72bc4640e52ab744d37fc4a7f4d80f30e6653da4d180eb2ac9c2506c005d59e6145bc2b40cb86d4de4d9b3beac70235dbe9ac6b4f21bbc52602d9e5597bf2691068517aa729a2a7b9c8039ce8e662ca4141fb8fd2b3136828f9b39eba35762839a43ecdfae7759d8aabd8614fef6ee51bc14f31d12bd8a8cac54bdc2e7f51dedf846aa638339b19e05618d74f36f448e370297e985be0d554608d3dfbb4fd4d59cded0d38370d05fe789b2fb222f473c4742e6c78003e74ca63b9f575cb2fb991c0de2a4c37e2110dd951939b2687229165d075f6b409b52594ecc674e46e0a6c6a45a2ecf65def00989bfd4c49a95424756fa1dbee7d3aafc49993d69c3c4f5c8dd13784e2a1ccdb86a03ae2a3330cf2a73b23ec07456786ec43ddac39dfac63586118178b5bfd853d38c9ad2fa4c4e9bfd9f1708eac8452fd9918d25b241f04aa41097c69b99784848a8180e04f59ce4eee6793072888e4e8b47520bde8aa3b164220b80c170239b2b626669bfbec97fec6c9ab06706bd6627a368ed330b84e6e02fbe5ef3deb766422b3fc75cbe82359e80f63655aff1dec37ffafbbc9dad9981294c1c624ac90faa1793faba1b0c34fa5b8fb3108b046dd3b30cf84497cc2bec0fff14e7d29ac50361164d8f030fb1f6165632dac39dc8eea500b95d213f438763612d2e11df723a4b75113a095d19ccd7ad87c388603106c00573b66208146d03d9cebfd95f9ce4d54004c84dbf946bb648c7ced00f1951fc6b79d3f40e2867dbdb3090cc5a50b5351dc2ecf84074ec454ccf8a27599257759e5187f7239b597b7147a6a952a3e79b212973bea25215554fca49c8eeb0ad79de5b2cbe360eb4926b64d53a45cd9595adb8880e55f2bc6ba75ee3b909df351a82273aea20e8095458544e13b9ac6711d5bbb31efd100e4ff2b3fabfccca5bbe91c902ec99b1f9af258eb8489a92c751f57603a63a9f7410453c52ff48d00cf09f793b24af1ded6ac50c6d4ddb01cfe5843b091c1caba9d6bbb9b168a9fa56f447ce6c61bd4717af92771a3be8fa4693f482a5c551648daa143762220e4162fa9d5a5dc215044a25c2e0d70728142553ed4e2f10004478d49df7c33ffbb46abe3f04349ac717a7930eb2644ab37adf9ca74879c4495f5391ac02f03e9cb09cd3cddabef7bf4453eb6ccb5f8c8952e47bb43795d14c401d509cc31d52fec2bf8c5f8fcd054c27098bdcc82896eb063b9f457c085f33fcf660484f958baa22313782429422a78b60ae25f8b44a6550814b5971822cc99cfca5e307b9192dc643e5cd3b3d9e7f0080b2d0f773cbb7a82c1634a717bec17396b42e54aa3fa3397b351a827a5b987ce07b5ca427856944b06034aa6ddecc7587303d205de79c915a7a48de7c442b200b796dac2c2f7fca120724930bd1104a2070910a3409d5c9d2cf01775f14a6ee63bcaa0ad1906d068653015928df45ec2e92de18bcfacafb7dcac340b1b4f19169c83de13ea53337e91b6013433bac494b58deddc99058d2002a36f7ce230004a0ec04e59d5b46b41ec2d66aa7992aabda868b7461cf0b33a76b38532ceabc2920b535ef6cd1df3664d60883b6dc6f99d16a81ef4a02d42a59d3028f1ee4d30846f537af306800781fc165afbb5742aa5e8a6054c4f54d2b86e564f1b0ab8b7b2c3357757ef4bd0be3221aebef43e8859d0ed85a179d82937ac66be00f82ccf47a7c6cd5327703c98cee4494448a5a4038d3dd0a270e76672525f4a87586214cc645a9255c23668766af45e118d7e12ccec64245b79bb57cc75e397a2f3cdc556e5dc1400d2e1176729419349bf777c71ad4de351f9d5ea1e1362723406254c3fa0b7986b3879dd9294e3d283e20381650df13ac525c1e443b260cf4fd45d59ce1180cbbc07addc6c26f8cae609b50db27fb75f45a3c8939fa9bbdd530ca27f6a764054acc0e4796b7c0994b8ac56ef44dbb2ebd0daa9679c77e316ef3245cab7ee78b3dc9a022c72d2972bca3b2b5b0a50b1228508cf2f04a45c4519e249a6264060aad91118e3ff0f9397aee1c14be00de323d2f635979c59298ab6ac123c1556fe4fc0d4bbbc80045f802c62e67b59a39a41b5f85aa80c05ce33c46065fbeeecece3bd790e5f4ac2df19fe4b829a53c24e859349beaa62a06bd48a0e850c72dd6738aa4c0c0381c80649bf7577b963129ac785f1ffe420e6c121a62c8bff4bc260e2f5e660526e17531c255e73e371906589482c3e6f668648ad42501554262a4893e38fb7ae2dca4064c8a08d98f805a3d917b7c6572afa592ef6379af7a7877a0185424a2261224eb84524cd4337878b5231bbecdbe01c0508d34a7a623b7f8d0fc4872dd6e1338e1687f969bc9c49b5251c9ca68b182ad5e2de7853e6e38595cefe9c8840549de9dc799040a22f2565d90834cb31865d7d93578823e8ff81140334808e1010adb22f1777e61db4a45d42f53d10c6057c56df827d6c80decc33d14113652cce15541a0c95cec9dd58d8c5013f3bd10f45905047b39c69245784fb55b8ac9dc930e47b036d732a559fef76df513d6ba3f54304df2fd11a6e15ce052ea197e900bde928dc475f49f79e390b52ed454fca7ea718aca5a9494d2602fb34e9bca48c76c189823103a7f532d649967b451378bd04603ba88876047c9132f13eaa1186200ad913bc4a0f15aea0767c71cf9db0f61966be500fea8725875fb522963af8e0202e87b574c87191c6bf9abb2669beea84612251562d9dbd55e9245aa8e1d183e40784d979a18a6bbb52ab8303a145ffe54e1933317363655a76f38d5bd3c4e77a22eeb85b9e49596ecdc16d7151d20bb76f9c37fb7340e200f877c7317d4e7e723ff172bcb14b09a6ef7e400327036f133a21802cf061a8aaf8b9f39bfff1fd2e9d406d45cad89b9c9062d11b1e94e61428ca122712c0bee3d975fbec94327916a5a06d4337cb5ffa370a7b481def544a5b487e67c083e731599cc7904bd8d4c529eb17c66ec20ff4e3365c624cc698555810d40ba61bd4f42f7848d2fdd306a1062149c9626ce2c10620ea9fbb96978e67fca5e6400a29ba95dfab9597030285d6b464de3463a5434de1f7f277d0d151dcfc9fdab92772f2021eefae202389fbda87ff7c000725865a36c016b4c984553a06c407d26426aae4e0f7df2ae187cb7012778a7753ee4b0fe6aa040026f3f43e244665731f9d30a7aad5c028a0e38b5f735fd473cb98066ed87a43b6b4795b63fd6cf922fe0785b4507e90a579c13a0260aecb0f14e34c3d6b1d48a808ae55625e7fbf5d38116d7399c8fba447c4e63b4b162e0aeae83c0ad1bc70d22191776939ae6bafcd08c686ef3ef8c2e0d5222e281fdf38debd03aa633638a876653959a702b170a6e49de0d4e51311e17079d198cd6c183bc824d6003af99a9296bbc4d184e4d90b546b3ae5dbc252dcae03139a89fcb0c36936c226b61683a061f1f578aa9e714826dbeca5a9433d8e4bea5b1755c20dae5065b786d625f9a94e20c4f57d11ddbcecc516f6872b5d20e1a206b03e9efe61f65bc6d1ea05cfcd7d396ab7d60a20a64f6ff52728b462292f109d51b426cfae9683e3b040ac9d0d4585166877f4a8e89fb7c29bb76595fbe2ae87629019d429ba39c91a43710d3148137f82629dfc22a2a007edcd4b9a9dc89f45ea1ce11b6406824338c8d203a6459a34490aa0129b10021cecc999d3d4a36d8bc630b0d96ecce432a641a673edfd0655a863afe0ace6ddf8a84c6980386868e83ac7adc655fca498c0c959ba6b479bc6f5b3e0386370c03136fb9eba0548b648fa062bf58a3e17efa2218bce7fc02bbde0105eaa3cdf0abc086a0c74b35125fd240bd1c38f77da36190e86f949fdf862db9a01a3ca693263c3d868d2b6a01ca885d9dbe1e555b7fa7b7a28acb26c4009152f0c628ece1f1f35f246ee5a206595c2641f65f402126ac46f984ec36f6e13d3775eb3923f42e1c6deb85cf134cdde32bc960ae35fae052d7a0127c5bd1511f2e3d87a17a9fd3a99e5810336355f8df792a27a675f5920b89c9a1da67bb98e0caec915b833c0eba1c47fd2df5409678c0b2e6332f32d188f07cef9f0b3bc93ec992223841eec293902d82052a89e798127b5b7b41326a8c2d5ff97cc3e8886214858081cee7aa6aaeae11fa37a6bac5c9385f5796023553510b09476052162e99ce549478621f620a7e9e4228673de356270221e0bd754bafc4208b4f6036a26f89849a94009d5221f631360af7a161772f7427d1063d29649b9e5bf8e302f52774dc16da2e3fc3821b6f4b5b333f12541d748c262ab4df2ee9aa02652850fd711107ed1c3acd3f92c46b3a5a5189be8f6aad2692e62ac11ed788454b0d941b9ccd2369ec9268cb5ae967592a183f45adf7efaccec260c6ffe57e373be56fe0c92095cbef70bbdb49194a23786653a462327f8e2081cc482f5a91260b3658799bd12f7bb1601c714c9c21eaca065f3f1d09d1f0e3cdfeb51c784170eecfd16b51eb75e9343e597a567ac568668acfa9acd627ef94bedcfc2858d4690044884ce1bda461bb9d9328923b8b04422fe5ab0c9ad22a37a0ff08b3f5cbd711555849ba775ce5d1074512071d9f97e055e9d67564ad34ea96b4ff09eaec802e88248d7e4df2f7fc601f3536e4cc8a652547e455e9cfdc9670a5bead74bbfb781145308d2aa5d97f146b47fa1ee783d86d906847eb5bad4a5472f6cff9df209073cce37cf042edbc9e3d68b4f44e154f0b6e2cbf0f1a5de05a49ef4025a065308df73026c9ea2574aca6e6d7d0dcde5a74edb3cc5f30a1846f5cd3f18ee985cbe1b764a9650e123a08ee3b03fdfda2ac2f0f26eff3678daccba698fb0db42f8885d930e5a01569c6ae534c104cb2300c22d289930bffeead27cc7a8a9ce5cd2ac62a28134a200608e81fc7d379cfb4384453cfda123727b582ee5ae8bd5399d8a29b89dafadb515bdf804e445ee4d7a055a8838a7ae6a1ca4846de56de984a4c3c1a9a0f91b42d89af5567ee9d15f22132c1c37d57a840be851cc4b7dfd145bccdf1a05536531a2b4ac103012c90d5480798911f5dd56d0aee42b9497bed36823132b26ccc9bb7ad930469b3856c7c8125000956ff54fc1cddb845c9095c537c39e90c95c432361c0f77d700500ac56460df38e6eb6c17d493ecbb7548029e40f385e6bea94681cb21b8625cb43673f446528def3bebc045588a59c1163a4d1463632cc9219a808e4f79f8f0b03d07dd74e57d85a1f8f308ec577ca194fff378d4ee96300ebba8438671b5e44a68a83fd7f0c22be0295de41ce8de522fa3911a09be7d489a620d7e7093005c3c6220aa39823191e140678419c02608f9a8b790000ca6c243d9c7db4fd2f32a2f5938a14986c00a16b70408c055f16894e3e1b1b6e8be87fd21f728e6d7fb95372846a62d93b20543104a4c7bb6983a42b86fb03dc02c30e2c758a470f6ffdc55a3eb1010526dfb9253bd5e1e089c58325b232df042882bb81dcd73d58cbecc5a679f704eed4e944fceadd5f20ed08ee90e3520e0ee8adfacd4fe8249d821204d4077709f1fb933901107922b53ed75e26ed0b8bc4a09eec605e988a0aa6ab324af579e548c179aafd0a41d3122c453718b162d2ba8036d736105cd111472c2c1543d3ce1562a1df6c30caaf03f98d804c565a803d45e88d7845be624ed9b4352d608e94f97fdeff59a8061434dea5f89bacdf1370ce8291f96273f9eced29f2bdb97f2539bfb2c1d3bf8f1b65ca2ee16b8ae6db37015e6dc6847620b3b82d16bb2cfde90b8f2a1ed178ce3cb8c487a039e1264447660af5225de533fb61097214d721559a326f4dc8c1342f1acf04bda3374e040c1407561d835b4769dd49f8d33064d44425f7d5a14d945645f9636c34e8e8b8e5a723b3f2eed2279c1c21ee9f060778b83941fa8623605619f9a8fb0e41fbdd40911dc4ebbbdad66eb911fa027cfcb76278aec8ec675caf862b9eb9d084f00ff8e563564d9753158763f507b9b3ee660b654906b9097822b10dc622deea9e6676ebfde9dd7e82a8a75373b69ad9dab3ec1e108b7b545f574462db25ce6c9a10b6eedb2aafee7d59228a129ad2e7962d1a612d7a49fcc93f565f38eedd45603edd2637cd06b5706a2e6a6feb97307574c024e6dc797e4eaa79db18f7440742e6a4f68dc3aaae06286087e9f4e3dab348959273547579c56f920873ff1039596c2c8bb7eb34704fff8dd0c51a90de77be5cd4227f85ddfa8d1fe251e39e327f7309cf465e661f241e5a07816b978843183e5f239683689ea146c0583d8843641ad8b2301e807073a4666435b4c41321c5dfb45f3935a07d6cf869856b00e75a2ebfc3e8f602c9592628c9ceac95702865147490ffc563fa653d8d12e4f6624df97d0531db4243a46c898c7dfc827f7663c8fa953bd4869f07b0a5bcad8523bba4f06843670e642b1d3d122effa1783540d0fefd74f6f586fad488e36827a998ae0e0c36c4aa5aff0b4887dbe5263e726c8e05884a3cfbc704edf5cb576075eda7cca82738cc69191b8c87f710f27d499fa87b773bbf62168227670a676c670a4c3424e5898ef182e0380053c9e18c274274114f80605540c0ca59c55093a49d6060c2ff974ea7de86be3b0d8ae812fa3bb1c28e4719bc40afc77d623e521b5d22c8453d68708b7f8f286046c4d1abdba66d42075b484ff9930dc90feebfbd413e0b61c469cae0d87369040d4ac070599d4bd222529655e866d120142f8e83a0038afa50c9ed7d413782c4f6278418f702baf4e76438f63dc8d1b4f2f9e91835de44009064af03b924a718c0f1bdec6186137eef80af24a163c449d0240ce897c13f68f99821e8dae427b284fb8d0c2523c52685b5a86992d4d4e288ce0ba8388e78f3fbfb12fafb9caa3bec441b35346122dc44c59fa4b60d6980a7f453934d1eb2c26804a3cc75dfd6eb25d8b25062aefe46c81ddc4662ef53bdb1db5cf1673b490a63a01e039979bb500c34fac21cde99f312ed67bbb256c00fd2a7a8c27d52a144f2b65b14ebef78826abdcdf4839dc2e187c599c5e5d9eaf96c5b4180b705822b40e1bab7eb0a04dbbcc8f37cea92a5a43ffa7a1251b1e2a9e46681fe870c32d177f946e357027ae906c16835775a63b150de4e8e571debd909782a8c0fff362e1f06f67a22e7a7a6c7b77c2ed8659d1bc127209f8f09f98605db0be7d76bd029e647c27582b003e0e69c0a80b335da55ef3dcfd267c34a22915ab162f5e01a01ae308108057ef6310db73b09e776799b14e762889af5d6d325dc9b4c083984124971f73119f5573e812e1424e9ef2e2689ecb6fc334133c516ec828d0c0a8f7b1bb0e62c8f22e3248c93c539dd40681b28f5a2f4cab3f8f4c563fa28edb2d6f17ddb3351457fd39aad7946c3c4ddd14bb9c6aa24780ff5d007c7fcb0a9865eca998d52a4be949326278a2817632a847c630d25e75d0b85eeb395a549e521854882667a384a7b9212db94c33f2c6adb8278dfbf3a1995133f3038b4d4aa37eaa794e6a989d084df463613748b8a58cd8536c2a7791b241e9f981175838b869890b315f542476b5a1e50a4051b83a75bfead4cdf823cf67cb75b82aa0eb8a3e3ba575252aa2211e96084dd1c3b0a52167a95664c96c679318755fa7b85b5bb3f6e5f3b2ca8e0887d7bea3864251041f1d4d2c3060ef017750bf5f15d5676bd6ffca05a6e8e11eb95d079257e5ead4722cbdde193d6bf2d5194d63b87e8b7b700a06734bf5801757cdec9d50e3d5c8a0d6ea9253ea2f96e4081bd5ac8152440489d9355f3c4f86b56d2fb15d0ca021a0d85b264e71f52abfaddfe61b5211853178a72fa6738ec30c53f507efa3e38740a321ab68f65c2c2a208b22f04c5b1562fc299e46a3969feae8754069931423395b5d56e7cca434bf3ce5cba0236060af814bec131365f4ffad28a665d29d097f24410bce9c54bd5ca63c2cc4d5fec1a58f7fdf76489a94adcf2c7adb134c18dd30b7df5501534bc1de208e55389e103e05a9f33130837ab4d9659d861</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">c7w 2021/1/16 15:05:38 读书笔记（bushi<br/>(密码长度119个字符，暴力破解肯定没戏啦，我自己都得复制粘贴进)</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>一些参数方程/极坐标图像</title>
    <url>/2020/figure-of-some-curves/</url>
    <content><![CDATA[<p>菜鸡没学过4-4，在微积分应用里面积面积和体积的时候有的草图画不出来…</p>
<h2 id="星形线"><a href="#星形线" class="headerlink" title="星形线"></a>星形线</h2><script type="math/tex; mode=display">
x^{\frac 2 3}+y^{\frac 2 3}=a^{\frac 2 3} \\
\begin{cases}
x=a\cos^3t\\
y=a\sin^3t
\end{cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4AL8K.png" alt=""></p>
<h2 id="摆线"><a href="#摆线" class="headerlink" title="摆线"></a>摆线</h2><script type="math/tex; mode=display">
\begin {cases}
x= a(t-\sin t)\\
y=a(1-\cos t)
\end {cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4E12T.png" alt=""></p>
<p>图为$-4\pi \le t \le 4\pi, a=1$的图像.</p>
<p>周期为$2\pi$.</p>
<h2 id="双纽线"><a href="#双纽线" class="headerlink" title="双纽线"></a>双纽线</h2><p><a href="https://imgchr.com/i/r4VeSK"><img src="https://s3.ax1x.com/2020/12/26/r4VeSK.png" alt="r4VeSK.png"></a></p>
<h2 id="笛卡尔心形线"><a href="#笛卡尔心形线" class="headerlink" title="笛卡尔心形线"></a>笛卡尔心形线</h2><p><a href="https://imgchr.com/i/r4ZSht"><img src="https://s3.ax1x.com/2020/12/26/r4ZSht.png" alt="r4ZSht.png"></a></p>
<h2 id="其它曲线"><a href="#其它曲线" class="headerlink" title="其它曲线"></a>其它曲线</h2><p><a href="https://imgchr.com/i/r4ZeNn"><img src="https://s3.ax1x.com/2020/12/26/r4ZeNn.png" alt="r4ZeNn.png"></a></p>
<p><a href="https://imgchr.com/i/r4Zu90"><img src="https://s3.ax1x.com/2020/12/26/r4Zu90.png" alt="r4Zu90.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZK3V"><img src="https://s3.ax1x.com/2020/12/26/r4ZK3V.png" alt="r4ZK3V.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZMcT"><img src="https://s3.ax1x.com/2020/12/26/r4ZMcT.png" alt="r4ZMcT.png"></a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mm.edrawsoft.cn/template/65439">https://mm.edrawsoft.cn/template/65439</a></li>
<li>部分图像采用 GeoGebra 绘制</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello, World.</title>
    <url>/2020/hello-world/</url>
    <content><![CDATA[<p>没钱结款只得把自己博客搬家的屑</p>
<h2 id="c7w-的破站-ver-2-0"><a href="#c7w-的破站-ver-2-0" class="headerlink" title="c7w 的破站 ver 2.0"></a>c7w 的破站 ver 2.0</h2><p>​        之前用 WordPress 搭的小站快要到期了，现在也不好找免费的虚拟主机薅羊毛，遂借用 github.io + Hexo 搭建本“静态博客”，来记录今后的点滴。</p>
<p><s>         azaz，我打点滴第一候选项是垫底，bksw</s></p>
<p>​        然后强行安利了贵班的文艺委员也用上了这种方法建的博客，甚至还组建了班级的github organisation.</p>
<p>​    等有空了就写博文，咕咕咕</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-堆</title>
    <url>/2020/ds-heap/</url>
    <content><![CDATA[<p>　　　数据结构中的堆结构　　　</p>
<h2 id="Knowledge-Base"><a href="#Knowledge-Base" class="headerlink" title="Knowledge Base"></a>Knowledge Base</h2><ul>
<li>完全二叉树：</li>
</ul>
<p>​        如果一棵深度为 $k$ 的二叉树，$1$ 至$ k-1$ 层的结点都是满的，即满足 $2^i-1$，只有最下面的一层的结点数小于$2^i-1$，并且最下面一层的结点都集中在该层最左边的若干位置，则此二叉树称为完全二叉树。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​        堆结构是一种数组对象，它可以被视为一棵完全二叉树。树中每个结点与数组中存放该结点中值的那个元素相对应，如下图：</p>
<p><a href="https://imgchr.com/i/Da1oSH"><img src="https://s3.ax1x.com/2020/11/25/Da1oSH.png" alt="Da1oSH.png"></a></p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul>
<li><p>下标：</p>
<p>​    第$i$个结点的父结点（parent(i)）、左结点(left(i))、右结点(right(i))的下标分别为：$\frac {i}{2}$、$2i$、$2i+1$；</p>
</li>
<li><p>大小：</p>
<p>堆可以分为<strong>最大堆(max-heap)</strong>和<strong>最小堆(min-heap)</strong>两种，分别满足对于任意的$i$, $A[parent(i)] &gt;(&lt;)A[i]$.</p>
</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li><a href="http://www.cplusplus.com/reference/algorithm/make_heap/">make_heap</a></li>
<li><a href="http://www.cplusplus.com/reference/algorithm/push_heap/">push_heap</a></li>
<li><a href="http://www.cplusplus.com/reference/algorithm/pop_heap/">pop_heap</a></li>
</ul>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><pre><code class="lang-c++">//最小堆
class smallHeap &#123;
public:
    int size, maxSize, * head = NULL;

    void init(int depth) &#123;
        int p = qpow(2, depth, 19260817);
        head = new int[p-1];
        maxSize = p - 1;
    &#125;

    smallHeap(int depth) &#123;
        init(depth);
    &#125;

    int getSize() &#123;
        return size;
    &#125;

    bool put(int val) &#123;
        if (size == maxSize) return false;
        size++;
        int currentNode = size; head[currentNode] = val;
        while (currentNode != 1) &#123;
            int parentNode = currentNode / 2;
            if (head[parentNode] &gt; head[currentNode]) &#123;
                int temp = head[parentNode];
                head[parentNode] = head[currentNode];
                head[currentNode] = temp;
                currentNode = parentNode;
            &#125;
            else &#123;
                break;
            &#125;
        &#125;
        return true;
    &#125;

    int get() &#123;
        int currentNode = 1;
        int tempValue = head[currentNode];
        head[currentNode] = head[size];
        size--;
        int parentNode = 1;
        while (1) &#123;
            if (parentNode * 2 &gt; size) break;
            currentNode = (head[parentNode * 2] &lt; head[parentNode * 2 + 1]) ? (parentNode * 2) : (parentNode * 2 + 1);
            if (head[parentNode] &gt; head[currentNode]) &#123;
                int temp = head[parentNode];
                head[parentNode] = head[currentNode];
                head[currentNode] = temp;
                parentNode = currentNode;
            &#125;
            else &#123;
                break;
            &#125;
        &#125;

        return tempValue;
    &#125;

    int top() &#123; return head[1]; &#125;

    void show() &#123;
        for (int i = 1; i &lt;= size; i++) &#123;
            cout &lt;&lt; head[i] &lt;&lt; &quot; &quot;;
        &#125;
    &#125;
&#125;;

//最大堆
class bigHeap &#123;
public:
    int size, maxSize, * head = NULL;

    void init(int depth) &#123;
        int p = qpow(2, depth, 19260817);
        head = new int[p-1];
        maxSize = p - 1;
    &#125;

    bigHeap(int depth) &#123;
        init(depth);
    &#125;

    int getSize() &#123;
        return size;
    &#125;

    bool put(int val) &#123;
        if (size == maxSize) return false;
        size++;
        int currentNode = size; head[currentNode] = val;
        while (currentNode != 1) &#123;
            int parentNode = currentNode / 2;
            if (head[parentNode] &lt; head[currentNode]) &#123;
                int temp = head[parentNode];
                head[parentNode] = head[currentNode];
                head[currentNode] = temp;
                currentNode = parentNode;
            &#125;
            else &#123;
                break;
            &#125;
        &#125;
        return true;
    &#125;

    int get() &#123;
        int currentNode = 1;
        int tempValue = head[currentNode];
        head[currentNode] = head[size];
        size--;
        int parentNode = 1;
        while (1) &#123;
            if (parentNode * 2 &gt; size) break;
            currentNode = (head[parentNode * 2] &gt; head[parentNode * 2 + 1]) ? (parentNode * 2) : (parentNode * 2 + 1);
            if (head[parentNode] &lt; head[currentNode]) &#123;
                int temp = head[parentNode];
                head[parentNode] = head[currentNode];
                head[currentNode] = temp;
                parentNode = currentNode;
            &#125;
            else &#123;
                break;
            &#125;
        &#125;

        return tempValue;
    &#125;

    int top() &#123; return head[1]; &#125;

    void show() &#123;
        for (int i = 1; i &lt;= size; i++) &#123;
            cout &lt;&lt; head[i] &lt;&lt; &quot; &quot;;
        &#125;
    &#125;
&#125;;
</code></pre>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P1090">https://www.luogu.com.cn/problem/P1090</a></li>
<li><a href="https://www.luogu.com.cn/problem/P1168">https://www.luogu.com.cn/problem/P1168</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Heap">https://github.com/raywenderlich/swift-algorithm-club/tree/master/Heap</a></li>
<li><a href="http://www.cplusplus.com/reference/algorithm/">http://www.cplusplus.com/reference/algorithm/</a></li>
</ul>
]]></content>
      <tags>
        <tag>Data Structure</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>合同矩阵与相似矩阵</title>
    <url>/2020/matrix-congruence-and-similarity/</url>
    <content><![CDATA[<h2 id="合同矩阵"><a href="#合同矩阵" class="headerlink" title="合同矩阵"></a>合同矩阵</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>称两矩阵$A,B$合同，当且仅当存在可逆矩阵$C$，使得</p>
<script type="math/tex; mode=display">
A=C^TBC</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li>合同关系是等价关系.</li>
</ol>
<ul>
<li>自反性: $A$与$A$本身合同</li>
<li>对称性: $A$合同于$B$, 则$B$合同于$A$</li>
<li>传递性: $A$合同于$B$, $B$合同于$C$, 则$A$合同于$C$.</li>
</ul>
<ol>
<li>合同矩阵的<strong>秩</strong>相同。</li>
</ol>
<h2 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>称两矩阵$A,B$相似，当且仅当存在可逆矩阵$C$，使得</p>
<script type="math/tex; mode=display">
A=C^{-1}BC</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ol>
<li>相似关系是等价关系.</li>
</ol>
<ul>
<li>自反性: $A$与$A$本身相似</li>
<li>对称性: $A$相似于$B$, 则$B$相似于$A$</li>
<li>传递性: $A$相似于$B$, $B$相似于$C$, 则$A$相似于$C$.</li>
</ul>
<ol>
<li>相似矩阵具有一系列相同的特点.</li>
</ol>
<ul>
<li>两者的秩相等；</li>
<li>两者的行列式值相等；</li>
<li>两者的迹相等；</li>
<li>两者拥有同样的特征值，但相应的特征向量一般不同；</li>
<li>两者拥有同样的特征多项式；<br>（我们可以利用这些必要条件来判断两个矩阵是否相似）</li>
</ul>
<ol>
<li>相似矩阵具有相同的可逆性，当它们可逆时，则它们的逆矩阵也相似。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hash Table（散列表）</title>
    <url>/2020/hash-table/</url>
    <content><![CDATA[<p>　　散列表的相关概念和内容　　</p>
<p>​        <strong>散列表</strong>（<strong>Hash table</strong>，也叫<strong>哈希表</strong>），是根据键（Key）而直接访问在内存储存位置的数据结构。</p>
<p>​        也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。</p>
<p>​        这个映射函数称做<strong>散列函数</strong>，存放记录的数组称做<strong>散列表</strong>。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>关键字为$k$的值存储在$f(k)$的存储位置中，称映射$f$为散列函数，按照这个思想建立的表称为<strong>散列表</strong>。</li>
<li>对不同的关键字可能得到同一散列地址，即$k_1 \neq k_2$，而$f(k_1) = f(k_2)$，这种现象称为<strong>冲突</strong>（Collision）。具有相同函数值的关键字对该散列函数来说称做<strong>同义词</strong>。</li>
<li>若对于关键字集合中的任一个关键字，经散列函数映象到地址集合中任何一个地址的概率是相等的，则称此类散列函数为<strong>均匀散列函数</strong>，这就使关键字经过散列函数得到一个“随机的地址”，从而减少冲突。</li>
</ul>
<h2 id="构造散列函数的方法"><a href="#构造散列函数的方法" class="headerlink" title="构造散列函数的方法"></a>构造散列函数的方法</h2><p>​        若采用求余的方法，采用质数可以在一定程度上解决冲突问题。</p>
<h2 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h2><ul>
<li>开放定址法</li>
<li>避免聚集：<ul>
<li>单独链表法</li>
<li>再散列</li>
</ul>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8">https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zmxiangde_88/article/details/8025541">https://blog.csdn.net/zmxiangde_88/article/details/8025541</a></p>
</li>
<li>Computer Science: An Overview, § 9.5 Traditional File Structures.</li>
</ul>
]]></content>
      <tags>
        <tag>Data Structure</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>同余 逆元 费马小定理</title>
    <url>/2020/inverse-element/</url>
    <content><![CDATA[<p>　　　如果会数学就好了　　　　</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>菜鸡不会打【<a href="https://www.luogu.com.cn/problem/P7108?contestId=13515">P7108</a>】，来补数学知识</p>
<h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><p>​        给定一个正整数$m$，如果两个整数$a$和$b$满足$a-b$能够被$m$整除，即$(a-b)/m$得到一个整数，那么就称整数$a$与$b$对模$m$同余，记作<script type="math/tex">a≡b(mod m)</script>。</p>
<p>​        对模$m$同余是整数的一个<strong>等价关系</strong>。</p>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>​        如果$p$是一个质数，而整数$a$不是$p$的倍数，则有<script type="math/tex">a^{p-1}≡1（mod p）</script>。</p>
<h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><script type="math/tex; mode=display">
1\%p=a^{p-1}\%p \\
=> \frac 1 a \% p = a^{p-2}\%p</script><p>​        因此，在计算$\frac{b^h-1}{b-1}$时，我们可以将其转化成$(b^h-1)*inverse(b-1)$计算。</p>
<h2 id="最后有用的代码"><a href="#最后有用的代码" class="headerlink" title="最后有用的代码"></a>最后有用的代码</h2><pre><code class="lang-c++">long long invEl(int x)
&#123;
    return qpow(x, M - 2, M);
&#125;
</code></pre>
<p>【黑人问号脸.jpeg】</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/kongbursi-2292702937/p/10582258.html">https://www.cnblogs.com/kongbursi-2292702937/p/10582258.html</a></li>
<li><a href="https://baike.baidu.com/item/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/4776158?fr=aladdin">https://baike.baidu.com/item/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/4776158?fr=aladdin</a></li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title>三角函数的正整数幂的不定积分</title>
    <url>/2020/simple-triangular-indefinite-integral/</url>
    <content><![CDATA[<p>啊说真的排版好麻烦明天再来调吧</p>
<h2 id="Knowledge-Base"><a href="#Knowledge-Base" class="headerlink" title="Knowledge Base"></a>Knowledge Base</h2><ul>
<li>换元法（凑微分法）</li>
</ul>
<script type="math/tex; mode=display">
\int f'(\phi(x))\phi'(x)dx = \int f'(\phi(x))d\phi(x) = f(\phi(x))+C</script><script type="math/tex; mode=display">
\int f'(u)du = \int f'(\phi(x)) \phi'(x)dx = g(x)+C = g(\phi^{-1} (x))+C</script><ul>
<li>分部积分法</li>
</ul>
<h2 id="关于三角函数的幂的积分"><a href="#关于三角函数的幂的积分" class="headerlink" title="关于三角函数的幂的积分"></a>关于三角函数的幂的积分</h2><h3 id="sin-或-cos-的幂"><a href="#sin-或-cos-的幂" class="headerlink" title="sin 或 cos 的幂"></a>sin 或 cos 的幂</h3><p>若指数中存在奇数：</p>
<script type="math/tex; mode=display">
\int \cos^7x \sin^{10}xdx</script><ol>
<li>选定 cos 与 sin 中次幂较低，且为奇数的一个，使用凑微分法</li>
<li>使用公式 $sin^2x+cos^2x=1$ 替换掉剩下的项</li>
</ol>
<p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
&\int \cos ^{7} x \sin ^{10} x d x \\
&=\int \cos ^{6} x \sin ^{10} x d \sin x \\
&=\int\left(1-\sin ^{2} x\right)^{3} \sin ^{10} x d \sin x \\
(t &=\sin x) \\
&= \int\left(1-3 t^{2}+3 t^{4}-t^{6}\right) t^{10} d t \\
&=\int\left(t^{10}-3 t^{12}+3 t^{14}-t^{16}\right) d t \\
&=\frac {t^{11}} {11}-\frac{3}{13} t^{13}+\frac{3}{15} t^{15}-\frac{1}{17} t^{17}+C \\
&=\frac{1}{11} \sin ^{11} x-\frac{3}{13} \sin ^{2} x+\frac{1}{5} \sin ^{10} x-\frac{1}{17} \sin ^{17} x+C
\end{aligned}</script><p>若指数中不存在奇数：</p>
<script type="math/tex; mode=display">
\quad \int \cos ^{2} x \sin ^{4} x d x</script><ol>
<li>使用二倍角公式</li>
<li>展开后分别积分</li>
</ol>
<p><em>Solve:</em></p>
<p>$\quad \int \cos ^{2} x \sin ^{4} x d x=\int \frac{1+\cos 2 x}{2} \frac{\left(1-\cos ^{2} x\right)^{2}}{4} d x$<br>$=\frac{1}{8} \int\left(\cos ^{2} 2 x-2 \cos 2 x+1\right)(1+\cos 2 x) d x$<br>$=\frac{1}{8} \int\left(\cos ^{3} 2 x-\cos ^{2} 2 x-\cos 2 x+1\right) d x$<br>$=\frac{1}{8} \int \cos ^{3} 2 x d x-\frac{1}{8} \int \cos ^{2} 2 x d x-\frac{1}{8} \int \cos 2 x d x+\frac{1}{8} \int d x$<br>$=\frac{1}{8} \cdot \frac{1}{2} \int \cos ^{2} 2x d \sin 2 x-\frac{1}{8} \int \frac{1+\cos 4 x}{2} d x-\frac{1}{8} \cdot \frac{1}{2} \sin 2 x+\frac{1}{8} x+C<br>$</p>
<p>$=\frac{1}{16} \int d \sin 2 x-\frac{1}{16} \int \sin ^{2} 2 x d \sin 2 x-\frac{1}{16} x-\frac{1}{16} \cdot \frac{1}{4} \sin 4 x-\frac{1}{16} \sin 2 x+\frac{1}{8} x+C$</p>
<p>$=\frac{x}{16}-\frac{\sin^32x}{48}-\frac{\sin4x}{64}+C$</p>
<h3 id="tan-与-cot-的幂"><a href="#tan-与-cot-的幂" class="headerlink" title="tan 与 cot 的幂"></a>tan 与 cot 的幂</h3><script type="math/tex; mode=display">
\int \tan ^{4} x d x</script><p>使用公式 $ \tan ^{2} x=\sec ^{2} x-1 $</p>
<script type="math/tex; mode=display">
\begin{array}{l}
\int \tan ^{0} x d x=\int d x=x+C \\
\int \tan ^{1} x d x=\int \frac{\sin x}{\cos x} d x=-\int \frac{1}{\cos x} d \cos x=-\ln |\cos x|+C \\
\qquad=\ln |\sec x|+C \\
\end{array}</script><script type="math/tex; mode=display">
\begin{aligned}
I_{n} &=\int \tan ^{n} x d x \\
&=\int \tan ^{n-2} x \tan ^{2} x d x \\
&=\int \tan ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{n-2} x \sec ^{2} x d x-\int \tan ^{n-2} x d x \\
&=\int \tan ^{n-2} x d \tan x-\int \tan ^{n-2} x d x \\
&=\frac{1}{n-1} \cdot \tan ^{n-1} x-I_{n-2}
\end{aligned}</script><p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \tan ^{4} x d x &=\int \tan ^{2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{2} x \sec ^{2} x d x-\int \tan ^{2} x d x \\
&=\frac{1}{3} \tan ^{3} x-\int \sec ^{2} x d x+\int d x \\
&=\frac{1}{3} \tan ^{3} x-\tan x+x+C
\end{aligned}</script><p>cot 的幂读者自证不难.</p>
<h3 id="sec-与-csc-的幂"><a href="#sec-与-csc-的幂" class="headerlink" title="sec 与 csc 的幂"></a>sec 与 csc 的幂</h3><script type="math/tex; mode=display">
\begin{aligned}
\int \sec x d x &=\int \frac{(\sec x)(\sec x+\tan x)}{\sec x+\tan x} d x \\
&=\int \frac{\sec x \tan x+\sec ^{2} x}{\sec x+\tan x} d x \\
&=\ln |\sec x+\tan x|+C \\
\int \sec ^{2} x d x &=\tan x+C
\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
\int \sec ^{n} x d x &=\int \sec ^{n-2} x \sec ^{2} x d x \\
&=\int \sec ^{n-2} x d \tan x \\
&=\sec ^{n-2} x \tan x-\int \tan x(n-2) \sec ^{n-3} x \sec x \tan x d x \\
&=\sec ^{n-2} \tan x-(n-2) \int \sec ^{n-2} x \tan ^{2} x d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n} x d x+(n-2) \int \sec ^{n-2} x d x \\
\end{aligned}</script><p>因此我们有：</p>
<script type="math/tex; mode=display">
\int \sec ^{n} x d x=\frac{1}{n-1} \sec ^{n-2} x \tan x+\frac{n-2}{n-1} \int \sec ^{n-2} x d x</script><p>csc 的幂同理显然.</p>
]]></content>
      <tags>
        <tag>Calculus</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1908 求逆序对</title>
    <url>/2020/luogu-P1908/</url>
    <content><![CDATA[<h2 id="归并排序求逆序对数目"><a href="#归并排序求逆序对数目" class="headerlink" title="归并排序求逆序对数目"></a>归并排序求逆序对数目</h2><pre><code class="lang-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;

unsigned long long result = 0;
int a[500001] = &#123;0&#125;;
int cache[500001] = &#123;0&#125;;

void sort(int l, int r)&#123;
    if (r &lt;= l) return;
    if(r-l==1)&#123;
        if(a[l]&gt;a[r])&#123;
            int temp = a[l];
            a[l] = a[r];
            a[r] = temp;
            result++;
        &#125;
        return;
    &#125;
    int mid = (l + r) / 2;
    //[l, mid] &amp;&amp; [mid+1, r]
    sort(l, mid);
    sort(mid + 1, r);
    int len = r - l + 1;
    int x = l, y = mid + 1;
    int pos = 0;
    while(x&lt;=mid &amp;&amp; y&lt;=r)&#123;
        while (x &lt;= mid &amp;&amp; y &lt;= r &amp;&amp; a[x] &lt;= a[y]) &#123;
            pos++;
            cache[pos] = a[x];
            x++;
        &#125;
        if (x &lt;= mid &amp;&amp; y &lt;= r &amp;&amp; a[x] &gt; a[y])&#123;
            pos++;
            cache[pos] = a[y];
            y++;
            result += mid-x+1;
        &#125; 
        if(x&gt;mid)&#123;
            while(y&lt;=r)&#123;
                pos++;
                cache[pos] = a[y];
                y++;
            &#125;
            break;
        &#125;
        if(y&gt;r)&#123;
            while (x&lt;=mid) &#123;
                pos++;
                cache[pos] = a[x];
                x++;
            &#125;
            break;
        &#125;
    &#125;
    for (int i = l; i &lt;= r; i++)&#123;
        a[i] = cache[i - l + 1];
    &#125;
&#125;

int main()&#123;
    int n;
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++)&#123;
        scanf(&quot;%d&quot;, &amp;a[i]);
    &#125;
    sort(1, n);
    cout &lt;&lt; result;
    return 0;
&#125;
</code></pre>
<h2 id="树状数组-离散化求逆序对数目"><a href="#树状数组-离散化求逆序对数目" class="headerlink" title="树状数组+离散化求逆序对数目"></a>树状数组+离散化求逆序对数目</h2><pre><code class="lang-c++">#include &lt;iostream&gt;
#define MAXN 500001
using namespace std;

int n;
unsigned long long result = 0;
int a[MAXN] = &#123;0&#125;;
int ft[MAXN + 1] = &#123;0&#125;;

int lowbit(int x) &#123;
    return x &amp; (-x);
&#125;

void update(int index, int val) &#123;
    for (int i = index; i &lt;= n; i = i + lowbit(i)) &#123;
        ft[i] += val;
    &#125;
&#125;

int getSum(int index) &#123;
    int result = 0;
    for (int k = index; k &gt; 0; k -= lowbit(k)) &#123;
        result += ft[k];
    &#125;
    return result;
&#125;

class entry &#123;
    public:
     int id, val, rank;
&#125; m[500001];

// Last Update: 2020-12-30
/* Quick Sort With CMP Start */
// Sort the element between [a+left, a+right)
// You need to implement the &quot;compare&quot; function.
// You&#39;d better implement a strict inequality in the set.
// An example is given in pseudocode.
/*
bool compare(T A, T B)&#123;
    if(A precedes B)&#123;
        return true;
    &#125;else&#123;
        return false;
    &#125;
&#125;
*/
template &lt;class T&gt;
void quickSort(T* a, int left, int right, bool (*cmp)(T, T)) &#123;
    T pivot = *(a + right - 1);
    int l = left, r = right - 1;
    while (l &lt; r) &#123;
        while (l &lt; r &amp;&amp; !cmp(pivot, a[l])) &#123;  // a[l] &gt;= pivot then continue
            l++;
        &#125;
        while (l &lt; r &amp;&amp; !cmp(a[r], pivot)) &#123;  // a[r] &lt;= pivot then continue
            r--;
        &#125;
        if (l != r) &#123;
            T temp = a[l];
            a[l] = a[r];
            a[r] = temp;
        &#125; else &#123;
            a[right - 1] = a[l];
            a[l] = pivot;
            quickSort(a, left, l, cmp);
            quickSort(a, l + 1, right, cmp);
        &#125;
    &#125;
&#125;
/* Quick Sort With CMP End */

bool compare1(entry a, entry b)&#123;
    if (a.val &lt; b.val) return true;
    if (a.val &gt; b.val) return false;
    if (a.id &lt; b.id) return true;
    return false;
&#125;

bool compare2(entry a, entry b)&#123;
    if (a.id &lt; b.id) return true;
    return false;
&#125;



int main()&#123;
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++)&#123;
        cin &gt;&gt; a[i];
        m[i].id = i;
        m[i].val = a[i]; 
    &#125;
    quickSort(m, 1, n + 1, compare1);
    for (int i = 1; i &lt;= n; i++)&#123;
        m[i].rank = i;
    &#125;
    quickSort(m, 1, n + 1, compare2);
    for (int i = n; i &gt;= 1; i--) &#123;
        update(m[i].rank, 1);
        result = result + getSum(m[i].rank - 1);
    &#125;
    cout &lt;&lt; result;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>code</tag>
        <tag>luogu</tag>
      </tags>
  </entry>
</search>
