<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Project404 | 0x01——玩家模型暂时确定</title>
    <url>/2021/Project404-0x01-player-model/</url>
    <content><![CDATA[<p><em>作者：Chlamydomonos</em></p>
<p>Project404所用的玩家模型已制作完成。</p>
<span id="more"></span>
<p>以下是使用<strong>Unity</strong>制作的一个演示。在演示中，可使用<strong>W/A/S/D</strong>键移动，<strong>Space</strong>键跳跃，<strong>Ctrl</strong>键潜行。（其实我就是用了一个预制好的第一人称控制器）</p>
<p>预览内容可以点击此<a href="http://www.thucs04.cn/Project404_HtmlDemos/player/">链接</a></p>
]]></content>
      <tags>
        <tag>Project404</tag>
      </tags>
  </entry>
  <entry>
    <title>Project404 | 0x00——项目计划</title>
    <url>/2021/Project404-0x00-project-intro/</url>
    <content><![CDATA[<p><em>作者：Chlamydomonos</em></p>
<p>​        在前天的班会上，钱成同学和王向阳同学提出了一个提议——为提高同学们的编程能力，我们可以合作编写一个小项目。于是，经过两天的思考，一个由众多随机浮现的想法整合成的idea成型了。这将是一个基于虚幻4引擎的多人小游戏项目，在名称确定前暂时定名为<code>Project404</code>。</p>
<span id="more"></span>
<h1 id="Project404是什么？"><a href="#Project404是什么？" class="headerlink" title="Project404是什么？"></a>Project404是什么？</h1><p>总体来说，这是一个进行在立方体地图上，具有PVP要素的捉迷藏游戏。</p>
<h2 id="关于立方体地图"><a href="#关于立方体地图" class="headerlink" title="关于立方体地图"></a>关于立方体地图</h2><p>游戏的地图将以一个立方体形状的“星球”为基础。星球上会随机生成若干建筑物，分为<strong>玩家出生点</strong>，<strong>商店</strong>与<strong>迷宫建筑</strong>。星球上除建筑之外的区域将有一些低矮的掩体。</p>
<h3 id="为什么会有立方体星球？"><a href="#为什么会有立方体星球？" class="headerlink" title="为什么会有立方体星球？"></a>为什么会有立方体星球？</h3><p>这个想法最初来自我在寒假时关于《Minecraft》mod开发的一些讨论。这大概是当时的一些对话——</p>
<blockquote>
<p><strong>Chlamydomonos：</strong>我的mod中需要一些零件。我可以添加一些什么零件呢？</p>
<p><strong>███：</strong>量子计算机！<sup><a href="#fn_①" id="reffn_①">①</a></sup></p>
<p><strong>Chlamydomonos：</strong>为什么？</p>
<p><strong>███：</strong>计算轨道，建造戴森球！</p>
</blockquote>
<p>​        此时，我有了一个初步的把“Minecraft”和”戴森球计划“联系起来的想法。</p>
<p>​        之后，我与王向阳有了进一步的讨论——</p>
<blockquote>
<p><strong>王向阳：</strong>这地上的方格为什么错位了？（Chlamydomonos正在玩《戴森球计划》）</p>
<p><strong>Chlamydomonos：</strong>因为星球是圆的，无法被完美地展开到方形网格上。</p>
<p><strong>王向阳：</strong>说不定可以把星球变成方的……</p>
</blockquote>
<p>​        于是，“方块”和“星球”的概念被又一次联系在一起。</p>
<p>​        之后，当我思考这个项目时，我就自然地使用了这个想法，让游戏的地图变成一个立方体。</p>
<h3 id="立方体的一些细节"><a href="#立方体的一些细节" class="headerlink" title="立方体的一些细节"></a>立方体的一些细节</h3><p>​        为简化开发工作及提高游戏体验，这个立方体星球上每个面的重力将垂直该面向下，并在面的各处大小相等。</p>
<p>​        根据进行游戏的玩家数量，每次游戏生成的地图大小将不同，上面的建筑数量也不同。</p>
<h2 id="关于建筑"><a href="#关于建筑" class="headerlink" title="关于建筑"></a>关于建筑</h2><p>每场游戏开始时，建筑将随机生成在立方体地图上。</p>
<h3 id="关于玩家出生点"><a href="#关于玩家出生点" class="headerlink" title="关于玩家出生点"></a>关于玩家出生点</h3><p>​        <strong>玩家出生点</strong>将被设计为只有一层的小型建筑，为框架结构，没有墙。在地图上的数目较少。玩家死亡后将在此重生。</p>
<h3 id="关于商店"><a href="#关于商店" class="headerlink" title="关于商店"></a>关于商店</h3><p>​        <strong>商店</strong>将是占地面积较大的一层建筑，在外墙上有若干门和一些可作为掩体的结构。玩家可进入商店购买道具，在商店内的玩家处于无敌状态。</p>
<h3 id="关于迷宫建筑"><a href="#关于迷宫建筑" class="headerlink" title="关于迷宫建筑"></a>关于迷宫建筑</h3><p>​        <strong>迷宫建筑</strong>将是随机生成的多层建筑。具体生成方式可能将采用<a href="https://zhuanlan.zhihu.com/p/66416593?edition=yidianzixun&amp;utm_source=yidianzixun&amp;yidian_docid=0M2y2bvM">波函数坍缩算法</a><sup><a href="#fn_②" id="reffn_②">②</a></sup>。迷宫建筑内将有多个相互连通的房间以及一些跑酷场景，供玩家躲藏。</p>
<p>另外，在建筑之外的地面上也会产生一些随机的掩体。</p>
<h2 id="关于游戏规则"><a href="#关于游戏规则" class="headerlink" title="关于游戏规则"></a>关于游戏规则</h2><p>游戏的规则将兼具多人对战和捉迷藏的元素。</p>
<h3 id="基础规则"><a href="#基础规则" class="headerlink" title="基础规则"></a>基础规则</h3><p>​        游戏开始时，玩家会被不均匀地分为<strong>Hider</strong>和<strong>Seeker</strong>两类。Hider的数量多于Seeker。</p>
<p>​        游戏中，每名玩家有一个<strong>分数</strong>。Hider的分数会随时间逐步增加，Seeker的分数保持不变。</p>
<p>​        Hider可以对Seeker进行<strong>攻击</strong>。同时，Seeker可以对Hider进行<strong>抓捕</strong>。</p>
<p>​        Seeker具有<strong>生命值</strong>，受到攻击时会下降。当生命值降为0时，Seeker被某名Hider<strong>击杀</strong>。此时，Seeker失去一部分分数，转移给击杀者。几秒后，Seeker在出生点复活。</p>
<p>​        当一个Seeker成功对Hider进行抓捕后，两人互换身份，且被抓捕者的大部分分数转移给抓捕者。新产生的Seeker生命值默认达到上限。新产生的Hider会在短时间内处于无敌状态。</p>
<p>​        游戏将在限定的时间内进行。游戏结束后，分数最高的玩家获胜。</p>
<h3 id="战斗规则"><a href="#战斗规则" class="headerlink" title="战斗规则"></a>战斗规则</h3><p>​        每名Hider有4个物品栏，可携带一个<strong>主武器</strong>，一个<strong>副武器</strong>，一个<strong>手雷</strong>以及一个<strong>特殊道具</strong>。</p>
<p>​        每名Seeker只有1个物品栏，可携带一个<strong>特殊道具</strong>。</p>
<p>​        游戏开始时，每名Hider默认携带一个初始主武器，没有手雷和特殊道具。每名Seeker不携带任何道具。</p>
<p>​        游戏开始时，一些道具会随机分布在地图的各处。可以装备该道具的玩家可捡起道具。</p>
<p>​        玩家可以在商店消耗分数购买道具。</p>
<h4 id="主武器"><a href="#主武器" class="headerlink" title="主武器"></a>主武器</h4><p>​        主武器将分为近战武器和远程武器两类。其中，近战武器可无限次攻击，而远程武器具有弹药上限，可到商店消耗分数补充弹药。</p>
<h4 id="副武器"><a href="#副武器" class="headerlink" title="副武器"></a>副武器</h4><p>​        副武器只能是近战武器。</p>
<h4 id="手雷"><a href="#手雷" class="headerlink" title="手雷"></a>手雷</h4><p>​        手雷是一种投掷使用的武器，具有数量上限，可到商店购买或从地图中捡起同种类型的手雷以补充数量。</p>
<h4 id="特殊道具"><a href="#特殊道具" class="headerlink" title="特殊道具"></a>特殊道具</h4><p>​        特殊道具是一类不能造成伤害的道具，使用时一般会消耗分数，有些的使用次数有上限，可能无法补充使用次数。</p>
<h1 id="为什么使用虚幻4引擎？"><a href="#为什么使用虚幻4引擎？" class="headerlink" title="为什么使用虚幻4引擎？"></a>为什么使用虚幻4引擎？</h1><p>在构思这个项目的过程中，最困难的阶段就是项目模板的选择。我曾思考过3种方案——</p>
<ul>
<li>使用<strong>Unity</strong>引擎编写</li>
<li>不使用游戏引擎，采用<strong>Java</strong>语言直接调用<strong>LWJGL</strong>图形库从头实现游戏</li>
<li>使用<strong>虚幻4</strong>引擎编写</li>
</ul>
<p>​        第二种方案首先被舍弃了。因为从头编写一个游戏的工作量过大，并不适合这个项目。</p>
<p>​        我的首选方案一直是使用Unity，因为Unity使用比较容易的<strong>C#</strong>语言，而且具有丰富的第三方插件来简化游戏的开发。但是，由于我们需要一个多人的游戏，这个方案还是被舍弃了。Unity曾经用来提供多人游戏支持的<strong>Unet</strong>库已经被弃用，而其宣称用来代替Unet的新版网络库一直都只是纸上谈兵。因此，最后虚幻4成为了唯一的可选方案。</p>
<p>​        虚幻4使用<strong>C++</strong>语言开发，并且具有完善的文档。这会让这个项目十分契合本学期的OOP课程。</p>
<h1 id="一些其他想法"><a href="#一些其他想法" class="headerlink" title="一些其他想法"></a>一些其他想法</h1><p>这个游戏的战斗系统将会是轻松愉快的沙雕风格。比如说我们目前构思出的一些武器——</p>
<h2 id="倍增手雷"><a href="#倍增手雷" class="headerlink" title="倍增手雷"></a>倍增手雷</h2><p>​        这个手雷在使用后数量不会减少，而会增加。但是，当其数量增加到127个后，再次使用它则会使数量溢出，变成-128个。此时它无法被丢弃，也无法被替换为别的武器。在玩家下次进入商店时，会扣除购买128个倍增手雷需要的分数。</p>
<h2 id="随机传送杖"><a href="#随机传送杖" class="headerlink" title="随机传送杖"></a>随机传送杖</h2><p>​        这是一个特殊道具，其效果为将一个随机的玩家传送到随机地点。</p>
<h2 id="动量守恒炮"><a href="#动量守恒炮" class="headerlink" title="动量守恒炮"></a>动量守恒炮</h2><p>​        巨大而沉重的火炮，发射弹药后玩家将会被向后击飞。</p>
<h2 id="锁定狙击枪"><a href="#锁定狙击枪" class="headerlink" title="锁定狙击枪"></a>锁定狙击枪</h2><p>​        可以造成大量伤害，但是被锁定狙击枪击中的玩家将免疫除锁定狙击枪外的一切伤害。</p>
<blockquote id="fn_①">
<sup>①</sup>. <strong>███</strong>刚刚入坑《戴森球计划》<a href="#reffn_①" title="Jump back to footnote [①] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <tags>
        <tag>Project404</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用MarkDown书写博客</title>
    <url>/2021/Missing-Semester-Lecture-01/</url>
    <content><![CDATA[<h2 id="Missing-Semester-Lecture-1"><a href="#Missing-Semester-Lecture-1" class="headerlink" title="Missing Semester Lecture 1"></a>Missing Semester Lecture 1</h2><p><strong>linux系统简单命令操作</strong></p>
<span id="more"></span>
<ul>
<li>echo + 内容：重复一遍</li>
<li>date：输出当前时间</li>
</ul>
<p>基本规则：空格代表命令的分割</p>
<ul>
<li>echo $PATH 可查看所有环境路径，即每一个指令可能存放的所有路径</li>
<li>which + 指令可查看该指令的程序路径（如which echo）</li>
<li>pwd：将输出现在所在路径（present working directory）</li>
<li>cd /——：切换当前工作路径（change directory）</li>
<li>.. ：可回到上一级文件夹</li>
<li>ls：列出当前所有文件</li>
<li>cd ~/—-/—-：~即代表 home/名字 这一目录，简略成这样写，相当于从头写路径，有时更方便</li>
<li>cd -：表示返回上一个所在的文件夹路径中，相当于返回（但不是返回上一级）</li>
<li><p>ls —help：可查看很多相关列出文件的方式与操作</p>
<ul>
<li>例如：ls -l 可以按行展开列出详细文件信息（longlisting format）</li>
</ul>
</li>
<li><p>-l打开的文件详细信息中会出现十位字母：</p>
<ul>
<li>第一位d代表是文件夹</li>
<li>之后9位代表权限，三位一组，共三组</li>
<li>第一组代表自己的权限，第二组是群组的权限，第三组是所有人的权限</li>
<li>r-read w-write x-execute</li>
<li>注意：想要打开某文件夹，必须要对之前路径中的所有文件夹都有execute的权限</li>
</ul>
</li>
<li>mv：move，可以修改文件名与路径，需要mv+两个路径</li>
<li>rm：只能remove文件</li>
<li>rmdir：只能remove空文件夹</li>
<li>mkdir：创建空文件夹</li>
<li>contrl+l：清屏</li>
<li><p>大于与小于号分别可作为输入流与输出流；其个数代表循环输入、输出的个数</p>
<ul>
<li>例如：echo hello &gt; hello.txt，那么后者文件中将写入hello</li>
<li>cat &lt; hello.txt 将在terminal中输出hello</li>
</ul>
</li>
<li><p>| ：(pipe) 以左侧的输出，作为右侧的输入</p>
</li>
<li><p>sudo (do as super user)：root一般拥有所有所有超级用户权限</p>
</li>
<li><p>sudo su：让shell以超级用户的身份运行指令，从而可以做很多修改等；su + 原用户名可以切换回来。</p>
<ul>
<li><p>例如，修改屏幕亮度：可以sudo su直接以root身份进行调节</p>
<p>即sudo su; echo 500 &gt; brightness</p>
</li>
<li><p>或者可以 echo 500 |  sudo tee brightness; 其中tee意思为既能通过pipe将左侧输出传给右侧作为输入，也能将该输出打在电脑上</p>
</li>
</ul>
</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="======="></a>=======</h2><p>title: Missing Semester Lecture 1<br>date: 2021/05/02 21:29:00<br>tags:</p>
<ul>
<li>知识分享</li>
<li>Linux<br>author:</li>
<li>QC</li>
</ul>
<hr>
<h2 id="Missing-Semester-Lecture-1-1"><a href="#Missing-Semester-Lecture-1-1" class="headerlink" title="Missing Semester Lecture 1"></a>Missing Semester Lecture 1</h2><p><strong>linux系统简单命令操作</strong></p>
<ul>
<li>echo + 内容：重复一遍</li>
<li>date：输出当前时间</li>
</ul>
<p>基本规则：空格代表命令的分割</p>
<ul>
<li>echo $PATH 可查看所有环境路径，即每一个指令可能存放的所有路径</li>
<li>which + 指令可查看该指令的程序路径（如which echo）</li>
<li>pwd：将输出现在所在路径（present working directory）</li>
<li>cd /——：切换当前工作路径（change directory）</li>
<li>.. ：可回到上一级文件夹</li>
<li>ls：列出当前所有文件</li>
<li>cd ~/—-/—-：~即代表 home/名字 这一目录，简略成这样写，相当于从头写路径，有时更方便</li>
<li>cd -：表示返回上一个所在的文件夹路径中，相当于返回（但不是返回上一级）</li>
<li><p>ls —help：可查看很多相关列出文件的方式与操作</p>
<ul>
<li>例如：ls -l 可以按行展开列出详细文件信息（longlisting format）</li>
</ul>
</li>
<li><p>-l打开的文件详细信息中会出现十位字母：</p>
<ul>
<li>第一位d代表是文件夹</li>
<li>之后9位代表权限，三位一组，共三组</li>
<li>第一组代表自己的权限，第二组是群组的权限，第三组是所有人的权限</li>
<li>r-read w-write x-execute</li>
<li>注意：想要打开某文件夹，必须要对之前路径中的所有文件夹都有execute的权限</li>
</ul>
</li>
<li>mv：move，可以修改文件名与路径，需要mv+两个路径</li>
<li>rm：只能remove文件</li>
<li>rmdir：只能remove空文件夹</li>
<li>mkdir：创建空文件夹</li>
<li>contrl+l：清屏</li>
<li><p>大于与小于号分别可作为输入流与输出流；其个数代表循环输入、输出的个数</p>
<ul>
<li>例如：echo hello &gt; hello.txt，那么后者文件中将写入hello</li>
<li>cat &lt; hello.txt 将在terminal中输出hello</li>
</ul>
</li>
<li><p>| ：(pipe) 以左侧的输出，作为右侧的输入</p>
</li>
<li><p>sudo (do as super user)：root一般拥有所有所有超级用户权限</p>
</li>
<li><p>sudo su：让shell以超级用户的身份运行指令，从而可以做很多修改等；su + 原用户名可以切换回来。</p>
<ul>
<li><p>例如，修改屏幕亮度：可以sudo su直接以root身份进行调节</p>
<p>即sudo su; echo 500 &gt; brightness</p>
</li>
<li><p>或者可以 echo 500 |  sudo tee brightness; 其中tee意思为既能通过pipe将左侧输出传给右侧作为输入，也能将该输出打在电脑上</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>a81e3dcec386f8ed8e866c8a67830062cb2ef870</p>
<ul>
<li>xdg-open：类似于查找，可以帮助你在正确的位置打开你想要的文件夹，更加快捷</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>知识分享</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP某节课的笔记</title>
    <url>/2021/note_of_OOP_from_Teburile/</url>
    <content><![CDATA[<p>OOP某节课的笔记</p>
<span id="more"></span>
<h2 id="模板与STL初步"><a href="#模板与STL初步" class="headerlink" title="模板与STL初步"></a>模板与STL初步</h2><p>类模板：使用参数类型 <typename T> 用类型T来定义模板类</p>
<pre><code class="lang-c++">template &lt;typename T&gt; class A&#123;
    T a;
&#125;
</code></pre>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>防止名称冲突，引入namespace 关键字</p>
<pre><code class="lang-c++">namespace A&#123;
    int x;
    int y;
&#125;
</code></pre>
<p>在使用时</p>
<pre><code class="lang-c++">using namespace A;
</code></pre>
<p>或者是</p>
<pre><code class="lang-c++">using namespace A::x;
</code></pre>
<h2 id="STL库"><a href="#STL库" class="headerlink" title="STL库"></a>STL库</h2><p>STL：Standard Template Library</p>
<p>包含四个组件：算法，容器，函数，迭代器</p>
<p>STL的命名空间是std</p>
<p>一般使用using namespace std::名称</p>
<p>大型工程当中不推荐引入整个命名空间</p>
<h3 id="STL容器"><a href="#STL容器" class="headerlink" title="STL容器"></a>STL容器</h3><p>容器是包含、放置数据的工具，通常为数据结构，包括：</p>
<ul>
<li>简单容器</li>
<li>序列容器</li>
<li>关系容器</li>
</ul>
<h4 id="pair-容器"><a href="#pair-容器" class="headerlink" title="pair 容器"></a>pair 容器</h4><pre><code class="lang-c++">template &lt;class T1,class T2&gt; struct pair&#123;
    T1 first;
    T2 second;
&#125;;

std::pair&lt;int,int&gt; t;

//或者
auto t = std::make_pair(&quot;abc&quot;,7);
</code></pre>
<p>pair 支持小于、等于、大于比较运算符</p>
<p>先比较第一个元素，再比较第二个元素，要求元素类型支持比较运算符</p>
<h4 id="tuple-容器"><a href="#tuple-容器" class="headerlink" title="tuple 容器"></a>tuple 容器</h4><p>tuple 是多个元素的pair，要求在使用时就确定内部由多少个元素</p>
<pre><code class="lang-c++">template&lt;class T1,class T2,class T3&gt; class tuple&#123;
    T1 a;
    T2 b;
    T3 c;
&#125;;

a=std::get&lt;0&gt;(tuple1);
b=std::get&lt;1&gt;(tuple2);

//
auto t=std::make_tuple(1,2,3);

int x,y,z;
std::tie(x,y,z)=std::make_tuple(1,2,3);

//使用tuple可以使函数返回多个返回值
std::tuple&lt;int,double&gt; f(int x)&#123;
    return std::make_tuple(x,double(x)/2);
&#125;
</code></pre>
<h4 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h4><p>可以自动扩展容量的数组，允许以下标来访问（高速）</p>
<pre><code class="lang-c++">//创建
std::vector&lt;int&gt; x;
//当前数组长度
int y=x.size();
//清空
x.clear();
//在末尾添加、删除
x.push_back(0);
x.pop_back();
//在中间添加、删除
x.insert(x.begin()+1,5);
x.erase(x.begin()+1);
x.erase(iterator first,iterator last);//删除一段
//删除一些元素后，后面的元素依次向前挪动，而迭代器指向的vector的位置不变
</code></pre>
<p>迭代器：一种检查容器内元素并遍历元素的数据类型，使用上类似于指针</p>
<p>以vector 为例，要求类T有迭代器</p>
<pre><code class="lang-c++">//定义
template&lt;class T,class Allocator = std::allocator&lt;t&gt;&gt;
class vector&#123;
    class iterator&#123;
        ...
    &#125;;
&#125;;

vector&lt;int&gt;::iterator iter;//定义一个迭代器

iter=x.begin(); //返回第一个元素的迭代器；
iter=x.end();//返回最后一个元素+1位置的迭代器

//iterator使用
//移动
iter +=3;
//求元素位置差
int dist=iter1-iter2;

//应用
vector&lt;int&gt; vec;
for(vector&lt;int&gt;::iterator it = vec.begin();it != vec.end(); it++)&#123;
    ...;
&#125;
//可以用 auto 来定义it的类型
//也可以写成
for (auto x:: vec)&#123;
    ...;
&#125;
</code></pre>
<p>在扩大vector的大小后，可能会使得所有迭代器失效:Push_back 使得vector扩张后，整个vector可能移动位置，扩大所申请的容量。vector 搬迁后，iterator 不变，原来的指向会有问题。 </p>
<h4 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h4><p>底层是双向链表，要求类T有迭代器</p>
<pre><code class="lang-c++">//创建
template&lt;class T,class Allocator = std::allocator&lt;T&gt;&gt; class list;
std::list&lt;int&gt; l;

//插入操作
l.push_front(1);
l.push_back(2);
//查询 返回迭代器
std::find(l.begin(),l.end(),1);
//插入指定位置：
l.insert(it,4);
</code></pre>
<p>list不支持下标的随机访问，支持高速在任意位置插入、删除数据，访问主要依赖于迭代器，操作不会导致迭代器失效（除指向被删除元素的迭代器外）</p>
<h4 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h4><p>不重复元素构成的无序集合</p>
<p>无序：不保持插入顺序，容器内部排列顺序根据元素大小排列（复杂度为 log n）</p>
<p>要求类Key 支持比较，有迭代器</p>
<pre><code class="lang-c++">//定义
template&lt;class Key, class Compare = std::less&lt;Key&gt;,class Allocator = std::allocator&lt;Key&gt;&gt; class set;
//插入
s.insert(1);
//查询 返回迭代器
s.find(2);
//删除
s.erase(s.find(2));
//统计
s.count(2);//2的个数，总是0或者1
</code></pre>
<h4 id="map-容器"><a href="#map-容器" class="headerlink" title="map 容器"></a>map 容器</h4><p>map常用作过大的稀疏数组或以字符串为下标的数组</p>
<p>复杂到为 log n</p>
<p>要求类Key有比较、迭代器</p>
<pre><code class="lang-c++">//定义
template&lt;class Key,class Compare = std::less&lt;Key&gt;,class Allocator = std::allocator&lt;std::pair&lt;const Key T&gt;&gt;&gt; class map;
</code></pre>
<p>map中的key互不相同，可以通过下标key来访问</p>
<p>查询：find(key) 统计：count(key)</p>
<p>删除：使用迭代器 erase；</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>OOP</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>总结报告大纲</title>
    <url>/2021/%E8%AE%A104%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<h2 id="总结报告大纲"><a href="#总结报告大纲" class="headerlink" title="总结报告大纲"></a>总结报告大纲</h2><ul>
<li><p>引言</p>
<ul>
<li>支队介绍</li>
<li>调研目的</li>
<li>参访地点介绍（简略）</li>
</ul>
</li>
<li><p>红色地点探访——开天辟地，历久弥新</p>
<p>​    中共一大会址与纪念馆</p>
<ul>
<li>一大历史简介（包括事件，地位等）</li>
<li>一大展馆与会址介绍（包括展厅内容等，按时序）</li>
<li>感想感悟（与历史上的中国精神相关）</li>
</ul>
<p>​    新青年编辑部旧址</p>
<ul>
<li>新青年刊物简介（包括刊物内容，地位等）</li>
<li>编辑部旧址介绍（包括展厅内容等，按时序）</li>
<li>感想感悟（与历史上的中国精神相关）</li>
</ul>
<p>【重点】总结两个参访地点（可对参访地点进行对比，精神层面的统一，二者对建党伟业的意义；与感想感悟类似，但目的为将二者合在一起总说）</p>
</li>
<li><p>互联网企业参访——驱动发展，引领创新</p>
<p>腾讯华东总部</p>
<ul>
<li>【重点】腾讯华东总部介绍（包括发展历史；业务介绍——主要围绕几个重点技术与项目，核心为在会议时的ppt的内容；公司文化；发展态势；行业特点；发展策略等方面）</li>
<li>展馆科技体验（包括参观的展示项目介绍）</li>
<li>感想感悟（与当下的中国精神相关，可以是创新，实干等等）</li>
</ul>
<p>字节跳动</p>
<ul>
<li>【重点】字节跳动介绍（同样细分包括公司发展历史；业务介绍；公司文化；发展态势；行业特点；发展策略等方面）</li>
<li>校友交流环节总结（按问题划分，写了解到的内容）</li>
<li>感想感悟（与当下中国精神相关）</li>
</ul>
<p>【重点】总结对比两个参访地点（对企业类型，业务，发展模式等进行对比，突出两个企业的相似点与不同点；再总括到二者对中国创新发展的影响；最后写对未来的展望等）</p>
</li>
<li><p>总结</p>
<p>对跨越古今的中国精神进行总结；同学们学到了什么；以及对未来的展望。总括整篇报告。</p>
</li>
<li><p>致谢</p>
</li>
</ul>
<hr>
<p>以下为注意事项</p>
<ul>
<li><p>总结报告可以借鉴一些公众号内容，网上内容以及行前手册内容</p>
</li>
<li><p>每个部分的三个分点，除了感想感悟偏主观外，其余一定要用第三人称进行【客观】的介绍！</p>
<blockquote>
<p>例：3.1.1技术水平与应用现状</p>
<p><strong>首先，从硬件、软件、运维三个层面，总结目前的技术手段。</strong></p>
<p>在硬件上，主流的超算常在计算节点上采用CPU和GPU分工的异构系统，不同节点以高速的网络互相连通，并共用SSD存储池。在软件上，超算上的程序设计以并行计算为基础，追求高可扩展性，常通过调用底层的算法库来实现兼顾开发的便捷性与充分利用硬件性能的平衡。在运维上，超算中心通常有监控运行状态和辅助操作的设施和软件，可大大节省人力，但是距离全自动运维还有很长的路要走。</p>
<p><strong>在技术层面，国内外的超级计算机存在差异。</strong></p>
<p>我国的硬件水平相对较高，有自己的技术路线，核心技术自主可控。我国自主研发的SW-26010处理器集成了控制（主核）和运算（从核）功能，在制程落后的情况下达到同期主流GPU相当的峰值运算速度。我国还首次在世界上实现峰值运算速度大于每秒10亿亿次。</p>
<p>在软件上，我国与世界顶尖水平还有较大差距。与国产硬件相关的软件生态目前十分欠缺，即使在使用英特尔x86的天河二号上，商业软件也常常不能适应超算的体系结构，在我国自研的SW-26010等硬件上，配套软件的不足更加明显。我国作为后来者，得到的用户支持较少，因此，要建成良好的软件生态，面临的困难远远超过英特尔等先行者。</p>
<p><strong>最后，从经济效益角度来考虑超级计算机。</strong></p>
<p>超算自身很难实现盈利，但是能极大带动多个领域的科学研究。超算的成本高于云计算，收费很难覆盖从研发、建造到运维的所有费用，即使是对商业公司开放的收费较高的超算也不例外。我国超算的研发和运营得到国家大力支持，主要面向科研用户，收费在一定程度上是象征性的，在超算这样的重要战略装备、国际竞争制高点上集中优势资源是我国体制先进性的重要体现。</p>
</blockquote>
</li>
<li><p>注意写作的段落格式，一定要看在群里发的格式要求</p>
</li>
<li><p>总共不用写很多，介绍类文字不要从网上照搬，要结合实践内容进行一顶点修改与删减，体现出自己的思考</p>
</li>
<li><p>以上分点我想到的可能并不全面，可能包括企业参访中探讨的隐私问题等也可以写入报告中，任务分组后可对架构进行调整</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>如何使用MarkDown书写博客</title>
    <url>/2021/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8MarkDown%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2%20-%20%E5%8D%9A%E5%AE%A2%E7%89%88/</url>
    <content><![CDATA[<p>如何使用MarkDown书写博客</p>
<span id="more"></span>
<h2 id="如何使用MarkDown书写博客"><a href="#如何使用MarkDown书写博客" class="headerlink" title="如何使用MarkDown书写博客"></a>如何使用MarkDown书写博客</h2><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>到目前为止，计04班的设备采购工作已经完成，基础的博客网页（ www.thucs04.cn ）也已经搭建完成，班级博客将是以后班级形象展示的重要阵地。</p>
<p>那班级博客上都有什么呢？这就需要大家来贡献自己的力量，书写一些博文，然后经过Github进行上传，充实我们的班级博客。</p>
<p>为了方便博客的维护，以及减少书写HTML的麻烦，经主要技术人员研究决定，让大家使用MarkDown来书写博文，主题、内容不限。</p>
<p>那么，什么是MarkDown呢？确切地来说，MarkDown是一种格式，就像是Word文档里可以调整字体的风格、字号，可以加粗文字等，Markdown也是用来进行这些操作的一种语言规范，例如本篇教程就是使用这种规范来书写的。但与Word不同的是，Markdown没有十分方便的GUI（图像界面），需要我们书写一些简单的代码来对这些文字进行格式的设定。</p>
<h3 id="2-MarkDown的书写平台"><a href="#2-MarkDown的书写平台" class="headerlink" title="2. MarkDown的书写平台"></a>2. MarkDown的书写平台</h3><p>就像是我们写C++的代码会放在VScode 上一样，书写Markdown也有这样的平台，在这种平台上书写，可以方便地让我们看到代码的效果。</p>
<p>下面推荐两种书写Markdown的平台</p>
<ul>
<li><p>VS code</p>
</li>
<li><p>typora</p>
</li>
</ul>
<h4 id="2-1-VS-code-书写Markdown-方式"><a href="#2-1-VS-code-书写Markdown-方式" class="headerlink" title="2.1 VS code 书写Markdown 方式"></a>2.1 VS code 书写Markdown 方式</h4><ol>
<li>安装vscode，这就足够了，不需要在vscode中安装其他插件</li>
<li>在vscode新建一个文件，后缀为 .md  例如：test1.md</li>
<li>右键点击上方 test1.md的标签，选择打开预览，就可以在预览当中看到自己书写的MarkDown代码的效果。</li>
<li>完成上述工作之后，你就可以在test1.md文件中<del>快乐地</del>书写博文和代码了（如何书写见下方语法教程）</li>
</ol>
<p><img src="https://i.loli.net/2021/05/09/8TfaBZdCFWbkAcD.png" alt="操作图示"  /></p>
<h4 id="2-2-typora书写Markdown-方式"><a href="#2-2-typora书写Markdown-方式" class="headerlink" title="2.2 typora书写Markdown 方式"></a>2.2 typora书写Markdown 方式</h4><ol>
<li>安装typora，网址：<a href="https://typora.io/">https://typora.io/</a>  ，往下翻，可以看到右上角Download选项，点击跳转到下载页面，根据电脑操作系统的版本下载对应的安装包</li>
<li>安装typora（无需打开这个软件）</li>
<li>在桌面（或其他位置）上新建一个文件，后缀为.md，以test.md为例</li>
<li>打开这个文件（选择打开方式为typora），之后你就可以在test.md文件中<del>快乐地</del>书写博文和代码了</li>
</ol>
<p><img src="https://i.loli.net/2021/05/09/nCNAxTJZuqabl4V.png" alt="typora版.png"  /></p>
<h3 id="3-Markdown基本使用"><a href="#3-Markdown基本使用" class="headerlink" title="3. Markdown基本使用"></a>3. Markdown基本使用</h3><p><strong>在写博文时，你只需要正常地输入博客的内容，然后在需要的格式处加上MarkDown的语法即可</strong></p>
<p>如下例（左侧为代码和文本，右侧为效果图）</p>
<p><img src="https://i.loli.net/2021/05/09/6ypgriUdthWH7Nq.png" alt="书写演示.png"></p>
<p>这里强烈推荐使用typora，它可以即时地看到效果，不需要打开预览图</p>
<p>Markdown的具体语法可以在网上查到，推荐一个网站：<a href="https://www.jianshu.com/p/191d1e21f7ed/">Markdown基本语法 - 简书 (jianshu.com)</a></p>
<h3 id="4-Markdown的基本语法教程"><a href="#4-Markdown的基本语法教程" class="headerlink" title="4. Markdown的基本语法教程"></a>4. Markdown的基本语法教程</h3><ol>
<li><p>n个#加上一个空格代表一个n级标题</p>
<p><img src="https://i.loli.net/2021/05/09/GqoRmiFEkDnfl3C.png" alt="基本使用1.png"></p>
<p><img src="https://i.loli.net/2021/05/09/y7QZD42mA1tHcKn.png" alt="基本使用2.png"></p>
</li>
<li><p>一对*括起来表示斜体；两对表示加粗；三对表示斜体加加粗</p>
<p><img src="https://i.loli.net/2021/05/09/vagwUxXlNIO49Dr.png" alt="基本使用3.png"></p>
<p><img src="https://i.loli.net/2021/05/09/HLy5mDAivb7jtRO.png" alt="基本使用4.png"></p>
</li>
<li><p>1、2、3、4等编号会自动延续，生成有序列表</p>
<p><img src="https://i.loli.net/2021/05/09/wybZBPEjp1o5SVR.png" alt="基本使用5.png"></p>
<p><img src="https://i.loli.net/2021/05/09/gbEdm3RhncS5jMo.png" alt="基本使用6.png"></p>
</li>
<li><p>三个或以上小短线 —- 在单行输入将会作为分割线</p>
<p><img src="https://i.loli.net/2021/05/09/16VqZWt7DSLgdOK.png" alt="基本使用7.png"></p>
<p><img src="https://i.loli.net/2021/05/09/m1juBy7MObsXo42.png" alt="基本使用8.png"></p>
</li>
<li><p>+，-，*加上空格将会生成无序列表；其可进行分级；在无序列表中shift+tab可回退至无序表的上一级</p>
<p><img src="https://i.loli.net/2021/05/09/GYwbNknClS9UKJa.png" alt="基本使用9.png"></p>
<p><img src="https://i.loli.net/2021/05/09/7HGn21NarhXBUAR.png" alt="基本使用10.png"></p>
</li>
<li><p>用n个&gt;符号之后加空格可以表示n级引用，可无限嵌套</p>
<p><img src="https://i.loli.net/2021/05/09/ZB8YjtXrCwLFyzM.png" alt="基本使用11.png"></p>
<p><img src="https://i.loli.net/2021/05/09/bBwpkNqtL7fiuZD.png" alt="基本使用12.png"></p>
</li>
<li><p>连续输入三个`可调用代码块</p>
<p><img src="https://i.loli.net/2021/05/09/hawdrX9oUBEqJDT.png" alt="基本使用13.png"></p>
<p><img src="https://i.loli.net/2021/05/09/tz53jiuWyhDg7vc.png" alt="基本使用14.png"></p>
</li>
<li><p>两对~中内容表示加上删除线</p>
<p><img src="https://i.loli.net/2021/05/09/agUVmMuLK4dHntp.png" alt="基本使用15.png"></p>
<p><img src="https://i.loli.net/2021/05/09/wOu4AWe6a2ojULY.png" alt="基本使用16.png"></p>
</li>
<li><p>用短竖线 |内容|内容| 的方式可以创建表格，创建完后可自行调整大小</p>
<p><img src="https://i.loli.net/2021/05/09/vNkcCuhEUHWFqf2.png" alt="基本使用17.png"></p>
<p><img src="https://i.loli.net/2021/05/09/PHJcvCAizxfEugS.png" alt="基本使用18.png"></p>
</li>
<li><p>[内容]：(网址) 的形式可以实现参数式超链接，不加：也有其他方式</p>
<p><img src="https://i.loli.net/2021/05/09/XDMStH8uwE7PICR.png" alt="基本使用19.png"></p>
<p><img src="https://i.loli.net/2021/05/09/QbXC5w9UoaFre6p.png" alt="基本使用20.png"></p>
<p><img src="https://i.loli.net/2021/05/09/phgSi54vzPGD7b1.png" alt="基本使用21.png"></p>
<p><img src="https://i.loli.net/2021/05/09/ZuYolXvWhUJgK16.png" alt="基本使用22.png"></p>
<p><img src="https://i.loli.net/2021/05/09/O7DUpFEMuJseNmL.png" alt="基本使用23.png"></p>
<p><img src="https://i.loli.net/2021/05/09/uUrsjwNIqiR4Vap.png" alt="基本使用24.png"></p>
</li>
<li><p>用！[名字]（路径）的方式可以插入图片（或大部分情况下直接复制即可）</p>
<p><img src="https://i.loli.net/2021/05/09/296sI1LpbTBRioa.png" alt="基本使用25.png"></p>
</li>
</ol>
<h3 id="5-Markdown书写博客的其他要求"><a href="#5-Markdown书写博客的其他要求" class="headerlink" title="5. Markdown书写博客的其他要求"></a>5. Markdown书写博客的其他要求</h3><p>上面的教程已经教会了大家如何书写Markdown语言规范，而在书写博客时有一个额外的要求：在整篇文档的最上方添加Front-matter</p>
<p>如何添加Front-matter？</p>
<p>如图所示，只需在前面添加几行代码：</p>
<p><img src="https://i.loli.net/2021/05/09/MvAgdCxeQEnoj3S.png" alt="title演示.png"></p>
<p>如果是typora，输入前面的三个短横线后会自动识别，此时不需要书写最后三个短横线</p>
<pre><code class="lang-markdown">---
title: 这是标题
date: 2021/05/08 12:00:00
author: 
- 作者名称1（建议使用GitHub用户名）
- 作者名称2（建议使用GitHub用户名）
categories: 这是分类
tag:
- demo
- test
---
</code></pre>
<p>从三条短横线开始，到三条短横线结束，需要填写title、date、author、categories、tag</p>
<ul>
<li>title 填写博客的标题，可以中文可以英文</li>
<li>date 填写博客的建立日期 格式为 YYYY/MM/DD hh:mm:ss</li>
<li>author 填写作者名称</li>
<li>categories 这一篇博客的分类，（为了方便管理，目前大家从这四个英文标题当中选填，首字母大写）<ul>
<li>Introduction  (各类教程、简介)</li>
<li>Diary （个人生活记录、推送）</li>
<li>Note （课堂、讲座笔记）</li>
<li>Discussion （有感而发的讨论）</li>
</ul>
</li>
<li>tag 博客希望的标签，可以添加多个，但是每个短横线之后一定要有<strong>空格</strong></li>
</ul>
<p>注意： 每一个参数的冒号后一定要有<strong>空格</strong></p>
<h3 id="6-关于博客图片的要求"><a href="#6-关于博客图片的要求" class="headerlink" title="6. 关于博客图片的要求"></a>6. 关于博客图片的要求</h3><p>大家在书写博客时可能会有要用到图片的地方，但与基础的图片语法不同的是，博客的图片需要经过处理：</p>
<ol>
<li><p>将所用图片储存在本地（你的电脑里）</p>
</li>
<li><p>打开网址 www.sm.ms</p>
</li>
<li><p>将图片拖入框内，选择upload</p>
</li>
<li><p>复制下方markdown的语句，粘贴到博客当中即可在博客中插入图片，此外不需要做任何操作</p>
<p><img src="https://i.loli.net/2021/05/09/PCbwsqE2VS8Hv1K.png" alt="空图.png"></p>
<p><img src="https://i.loli.net/2021/05/09/UjuxBOtd8wKPim5.png" alt="空图2.png"></p>
<p><img src="https://i.loli.net/2021/05/09/3doiDKBtmanGelJ.png" alt="空图3.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Introduction</category>
      </categories>
      <tags>
        <tag>introduction</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
